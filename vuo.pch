/**
 * @file
 * Vuo prefix header.
 *
 * @copyright Copyright © 2012–2023 Kosada Incorporated.
 * This interface description may be modified and distributed under the terms of the GNU Lesser General Public License (LGPL) version 2 or later.
 * For more information, see https://vuo.org/license.
 */

// Can't use "#pragma once" here since Clang emits warning "#pragma once in main file".
#ifndef VUO_PCH
#define VUO_PCH

#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <getopt.h>

#include "VuoConfig.h"

#ifdef __cplusplus

#include <string>
#include <vector>
#include <map>
#include <list>
#include <set>

using namespace std;

#ifdef VUO_PCH_LLVM
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wconversion"
#pragma clang diagnostic ignored "-Wdocumentation"
#pragma clang diagnostic ignored "-Wglobal-constructors"
#pragma clang diagnostic ignored "-Wmissing-noreturn"
#pragma clang diagnostic ignored "-Wshorten-64-to-32"
#pragma clang diagnostic ignored "-Wsign-conversion"
#pragma clang diagnostic ignored "-Wswitch-enum"
#pragma clang diagnostic ignored "-Wunreachable-code"

#define __STDC_CONSTANT_MACROS
#define __STDC_FORMAT_MACROS
#define __STDC_LIMIT_MACROS
#include <clang/Basic/Version.h>
#include <clang/CodeGen/CodeGenAction.h>
#include <llvm/Option/ArgList.h>
#include <clang/Driver/Compilation.h>
#include <clang/Driver/Driver.h>
#include <clang/Driver/ToolChain.h>
#include <clang/Frontend/CompilerInstance.h>
#include <clang/Frontend/CompilerInvocation.h>
#include <clang/Frontend/FrontendDiagnostic.h>
#include <clang/Frontend/TextDiagnosticPrinter.h>
#include <llvm/Support/DynamicLibrary.h>
#include <llvm/Support/Host.h>
#include <llvm/Support/Program.h>
#include <llvm/Object/Archive.h>
#include <llvm/Object/MachOUniversal.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/DiagnosticPrinter.h>
#include <llvm/LinkAllPasses.h>
#include <llvm/Linker/Linker.h>
#include <llvm/IR/PassManager.h>
#include <llvm/IR/Verifier.h>
#include <llvm/Analysis/ValueTracking.h>
#include <llvm/Bitcode/BitcodeReader.h>
#include <llvm/Bitcode/BitcodeWriter.h>
#include <llvm/ExecutionEngine/Interpreter.h>
#include <llvm/ExecutionEngine/GenericValue.h>
#include <llvm/Support/raw_ostream.h>
#include <llvm/Support/MemoryBuffer.h>
#include <llvm/IRReader/IRReader.h>
#include <llvm/Support/Path.h>
#include <llvm/Support/TargetRegistry.h>
#include <llvm/Support/TargetSelect.h>
#include <llvm/Transforms/Utils/Cloning.h>
#include <llvm/IR/ValueSymbolTable.h>
using namespace llvm;

#pragma clang diagnostic pop
#endif


#ifdef VUO_PCH_QT
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#pragma clang diagnostic ignored "-Wunreachable-code"
#pragma clang diagnostic ignored "-Winvalid-constexpr"

#include "VuoMacOSSDKWorkaround.h"

// Include file, line, and function in qDebug() messages.
#define QT_MESSAGELOGCONTEXT

#include <QtCore/QtCore>

// So we can call QPixmapCache::totalUsed().
#define Q_TEST_QPIXMAPCACHE

#include <QtGui/QtGui>
#include <QtWidgets/QtWidgets>
#include <QtPrintSupport/QtPrintSupport>
#include <QtMacExtras/QtMacExtras>

#include <QtNetwork/QNetworkAccessManager>
#include <QtNetwork/QNetworkRequest>
#include <QtNetwork/QNetworkReply>

#include <QtQuick/QtQuick>
#include <QtQuickWidgets/QtQuickWidgets>

#pragma clang diagnostic pop
#endif

#if defined(VUO_PCH_QT) || defined(VUO_PCH_QTEST)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wimplicit-fallthrough"
#include <QtTest/QtTest>
#pragma clang diagnostic pop

#endif


#endif

#include <zmq/zmq.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdocumentation"
#include <json-c/json.h>
#pragma clang diagnostic pop
#undef hexdigit

#include "VuoMacOSSDKWorkaround.h"
#include <dispatch/dispatch.h>

/// Creates a C string from raw text (saves having to doublequote-escape and/or use backslashes).
#define VUO_STRINGIFY(...) #__VA_ARGS__

/// Creates a QString from raw text (saves having to doublequote-escape and/or use backslashes).
#define VUO_QSTRINGIFY(...) QString(#__VA_ARGS__)

#include "VuoLog.h"

#ifdef VUO_PCH_FRAMEWORK
#include "Vuo.h"
#endif

#endif
