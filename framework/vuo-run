#!/bin/bash

set -o errexit
set -o pipefail

VUO_RUN_DIR=$(dirname $0)
VUO_COMPILE=vuo-compile
if [ -x 'framework/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='framework'
elif [ -x 'bin/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='bin'
	VUO_COMPILE=vuo-compile-for-framework
elif [ -x '../build/bin/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='../build/bin'
	VUO_COMPILE=vuo-compile-for-framework
elif [ -x '../framework/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='../framework'
elif [ -x '../../framework/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='../../framework'
elif [ -x '../../../framework/vuo-compile' ]; then
	VUO_FRAMEWORK_PATH='../../../framework'
elif [ -x "$VUO_RUN_DIR/vuo-compile" ]; then
	VUO_FRAMEWORK_PATH="$VUO_RUN_DIR"
else
	echo "Error: Couldn't find vuo-compile."
	exit
fi

REPEAT=1
GMALLOC=''
declare -a COMPOSITIONS
for argument do
	case "$argument" in
		--stop-after=*)
			STOP_AFTER="${argument#*=}"
		;;

		--repeat=*)
			REPEAT="${argument#*=}"
		;;

		--lldb)
			LLDB="lldb -o run --"
		;;

		--gmalloc)
			GMALLOC=1
		;;

		--verbose)
			VERBOSE=--verbose
		;;

		*)
			COMPOSITIONS+=("$argument")
		;;
	esac
done
if [ -n "$STOP_AFTER" -a -n "$LLDB" ]; then
	echo "error: Can't use both --stop-after and --lldb at the same time."
	exit 1
fi

for i in $(seq 1 $REPEAT); do
	if [ $REPEAT -gt 1 ]; then
		echo "$i"
	fi

for filename in "${COMPOSITIONS[@]}"; do
	if [ ${#COMPOSITIONS[@]} -gt 1 ]; then
		echo "$filename"
	fi

	COMPOSITION_WITHOUT_EXTENSION="${filename/.vuo/}"
	COMPOSITION_BASENAME="$(basename "$COMPOSITION_WITHOUT_EXTENSION")"

	if [ ! -f "$COMPOSITION_WITHOUT_EXTENSION.vuo" ]; then
		echo "Error: $COMPOSITION_WITHOUT_EXTENSION.vuo: Composition not found"
		exit 1
	fi

	COMPOSITION_COMPILED="/tmp/$COMPOSITION_BASENAME.bc"
	$VUO_FRAMEWORK_PATH/$VUO_COMPILE $VERBOSE "$COMPOSITION_WITHOUT_EXTENSION.vuo" --output="$COMPOSITION_COMPILED"
	if [ ! -f "$COMPOSITION_COMPILED" ]; then
		echo "Error: $COMPOSITION_WITHOUT_EXTENSION.vuo: Compilation failed"
		exit 1
	fi
	
	COMPOSITION_LINKED="/tmp/$COMPOSITION_BASENAME"
	$VUO_FRAMEWORK_PATH/vuo-link $VERBOSE "$COMPOSITION_COMPILED" --output="$COMPOSITION_LINKED"
	if [ ! -f "$COMPOSITION_LINKED" ]; then
		echo "Error: $COMPOSITION_WITHOUT_EXTENSION.vuo: Linking failed"
		exit 1
	fi

	# Add the `com.apple.security.get-task-allow` entitlement, to support Instruments > Leaks on macOS 11+.
	if [[ $(sw_vers -productVersion) > 11 ]] ; then
		COMPOSITION_ENTITLEMENTS="/tmp/${COMPOSITION_BASENAME}.entitlements"
		cat <<EOF >"$COMPOSITION_ENTITLEMENTS"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "https://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>com.apple.security.get-task-allow</key>
	<true/>
</dict>
</plist>
EOF
		codesign -s - -f --entitlements "$COMPOSITION_ENTITLEMENTS" "$COMPOSITION_LINKED" \
			2>&1 | (fgrep -v 'replacing existing signature' || true)
	fi

	pushd . > /dev/null
	cd "$(dirname "$filename")"
	[ -n "$GMALLOC" ] && export DYLD_INSERT_LIBRARIES=/usr/lib/libgmalloc.dylib
	if [ -z "$STOP_AFTER" ]; then
		$LLDB "$COMPOSITION_LINKED"
		export -n DYLD_INSERT_LIBRARIES
	else
		"$COMPOSITION_LINKED" &
		export -n DYLD_INSERT_LIBRARIES
		sleep "$STOP_AFTER"
		# echo "    Stoppingâ€¦"
		pkill "$COMPOSITION_BASENAME"
		wait
		# echo "    Stopped."
	fi
	popd > /dev/null
done
done
