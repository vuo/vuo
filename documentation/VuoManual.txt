---
title: Vuo
author: VUO_VERSION
---

<!-- Keep this description in sync with VuoEditorAboutBox. -->
**Create memorable interactive experiences — without coding.**

Drag, drop, and connect Vuo's simple building blocks to support your creative work:
VJ gigs, exhibits, installations, stage productions, dome graphics, visual signage,
video effects, maker projects, trade show booths, and more.

# Getting started
<abstract>An example that illustrates the basic concepts</abstract>

Welcome to the Vuo community! So you want to learn how to use Vuo in your creative work. Let's jump right in with an example.

## Quick start

This example will walk you through the process of creating an animated pattern like this:

\tip{You can watch a video of this example at https://vuo.org/quickstart}

\tip{You can find the completed example composition in \menu{File > Open Example > Quick Start}.}

\vuoScreenshot{QuickStart-NoiseGlass-output}

\vuoScreenshot{QuickStart-NoiseGlass-canvas}

If you haven't already, download and install Vuo, as described in the [Installing Vuo](#installing-vuo) section.

### Creating a new composition

In Vuo, the documents that you work with are called *compositions*. Start a new composition by going to \menu{File > New Composition from Template > Window > Image}.

The rounded rectangles in the composition window are called *nodes*. The area that you place nodes on is called the *canvas*.

\vuoImage{0.33}{QuickStart-NoiseGlass-step1.pdf}

For this example, you won't need all of these nodes, just \vuoNode{Fire on Display Refresh} and \vuoNode{Render Image to Window}. So you can click on each of the rest of the nodes and hit \keys{⌫} (Delete).

\vuoScreenshot{QuickStart-NoiseGlass-step2}

As you may have guessed from their titles, each node has a job or responsibility. The two nodes on the canvas will each perform a task that contributes to the animated pattern that you're creating. The \vuoNode{Render Image to Window} node will be in charge of displaying the pattern in a window. The \vuoNode{Fire on Display Refresh} node will be in charge of the timing of the animation.

\tip{An animation is a series of images displayed in rapid succession. The fastest rate at which your computer monitor can display a series of images is called the \emph{display refresh rate}. On many monitors, the display refresh rate is 60 times per second.}

### Running the composition

Let's see what you've built so far. Click the Run button. This launches the composition.

Before, on the canvas, you were looking at a blueprint or instructions for what the composition is supposed to do. Now, you're seeing the composition in action.

The window that pops up comes from the \vuoNode{Render Image to Window} node.

\vuoScreenshot{QuickStart-NoiseGlass-step2-output}

### Adding a node

So far, you have a solid black graphics window. To show an image in the window, you'll need a node whose job it is to make an image. To find such a node, search the Node Library for "make image", like this:

\vuoScreenshot{QuickStart-NoiseGlass-step3}

\tip{The Node Library is a directory of all available nodes. If you don't see it, go to \menu{View > Node Library > Show Node Library}.}

In the search results, locate the \vuoNode{Make Noise Image} node.

\vuoScreenshot{QuickStart-NoiseGlass-step4}

Drag the \vuoNode{Make Noise Image} node from the Node Library onto the canvas.

\vuoScreenshot{QuickStart-NoiseGlass-step5}

### Connecting nodes with cables

Now you have three nodes on the canvas. Individually, each node does a simple job. How do you make them work together to accomplish something bigger? You connect them with *cables*.

Start dragging from the circle on the right of the \vuoNode{Fire on Display Refresh} node, which is called an *output port*. The line that emerges from the port as you drag is called a *cable*. Drop the end of the cable onto the circle on the left side of the \vuoNode{Make Noise Image} node labeled \vuoPort{Time}, which is called an *input port*.

\vuoImage{0.33}{QuickStart-NoiseGlass-step6.pdf}

Next, drag a cable from the output port of \vuoNode{Make Noise Image} and drop it on the \vuoNode{Render Image to Window} node's \vuoPort{Image} input port.

\vuoScreenshot{QuickStart-NoiseGlass-step7}

Back in the graphics window, you can see that the three nodes are now working together to make a rapid succession of noise images and display them in a window.

\tip{To learn about noise images, read the \vuoNode{Make Noise Image} node's documentation in the lower panel of the Node Library.}

\vuoScreenshot{QuickStart-NoiseGlass-step7-output}

\tip{The ability to modify a composition while it's running and see the results immediately, as in this example, is called \emph{live editing}.}

### Editing an input port value

You can alter how a node does its job by editing its input port values. For example, double-click on the \vuoNode{Make Noise Image} node's \vuoPort{Color B} input port and choose a different color.

\vuoScreenshot{QuickStart-NoiseGlass-step8}

\vuoScreenshot{QuickStart-NoiseGlass-step8-output}

### Adding another node

You can add more nodes to your composition to make more interesting effects. Search the Node Library for "image filter" to see the built-in image effects.

\vuoScreenshot{QuickStart-NoiseGlass-step9}

Drag the \vuoNode{Make Stained Glass Image} node from the Node Library onto the canvas.

\vuoScreenshot{QuickStart-NoiseGlass-step10}

Draw a cable from the \vuoNode{Make Noise Image} node's output port to the \vuoNode{Make Stained Glass Image} node's \vuoNode{Image} input port, then another cable from the \vuoNode{Make Stained Glass Image} node's output port to the \vuoNode{Render Image to Window} node's input port.

\vuoScreenshot{QuickStart-NoiseGlass-step11}

\vuoScreenshot{QuickStart-NoiseGlass-step11-output}

As you did with the \vuoNode{Make Noise Image} node, you can adjust how the \vuoNode{Make Stained Glass Image} node affects the image by editing the node's input port values.

\vuoScreenshot{QuickStart-NoiseGlass-step12}

\vuoScreenshot{QuickStart-NoiseGlass-output}

### Summary

This example covered many of the basics of using Vuo.

   - You learned that each node is in charge of one job.
   - You learned that nodes work together by communicating through cables connected at ports.
   - You launched your composition into action with the Run button.
   - You searched the Node Library for a node that does a specific job.
   - You added nodes to the canvas and connected them with cables.
   - You changed settings such as colors by editing input ports.
   - You used specimens of some common varieties of nodes: nodes that are in charge of timing, nodes that generate and filter images, and nodes that render graphics to a window.

Next, we'll take a closer look at what exactly happens while a composition is running.


## Tracing through a composition
<abstract>Using port popovers to see the information flowing through a running composition</abstract>

When you ran the Quick Start composition, the four nodes in the composition worked together to create an end result: a window displaying an animated pattern. As you added each node to the composition, you saw how it contributed to the end result. Now let's look at each node's contribution in more detail.

### Port popovers

If you want to understand the inner workings of a composition, *port popovers* are an extremely useful tool. You can visualize step by step how each node contributes to the end result.

Open the port popover for the \vuoNode{Fire on Display Refresh} node's \vuoPort{Refreshed at Time} output port by clicking on the port. The small window that appears is the port popover. As the composition runs, the port popover shows the information flowing through the port in real time.

\vuoScreenshot{QuickStart-NoiseGlass-trace1}

###  Information flow

Two kinds of information can flow through ports: *data* and *events*.

For the \vuoPort{Refreshed at Time} port, the data is the time — the number of seconds since the composition started running. At the moment the screenshot above was taken, the port popover showed that the data was about 12.87.

The port popover also shows that the \vuoPort{Refreshed at Time} port is outputting information at about 60 times per second (the monitor's refresh rate). Every 1/60 second, the port outputs a slightly greater number of seconds — accompanied by a second piece of information called an event.

Events control the timing of your composition. An event is an impetus or signal that tells a node that it's time to do its job.

\tip{Why are events and data separate things? This will become clear later when you learn about event-only ports and event-only cables, in which events travel without data.}

When you run the Quick Start composition, the nodes do their jobs one at a time, left to right. That's not because they happen to be placed left to right on the canvas, but because the events and data flow through nodes and cables in a methodical way — which we'll trace through now using port popovers.

### Step 1: Fire on Display Refresh to Make Noise Image

Click on the port popover for \vuoPort{Refreshed at Time} so it will stay open on the canvas. Then click on the \vuoNode{Make Noise Image} node's \vuoPort{Time} input port to open its popover.

\vuoScreenshot{QuickStart-NoiseGlass-trace2}

As you can see, the events and data shown in the two port popovers are the same. A stream of information is flowing out of the \vuoPort{Refreshed at Time} output port, along the cable, and into the \vuoPort{Time} input port.

As each event hits the \vuoNode{Make Noise Image} node's \vuoPort{Time} input port, it prompts the \vuoNode{Make Noise Image} node to do its job. The node does so, using the data that accompanied the event as one of its parameters.

### Step 2: Make Noise Image to Make Stained Glass Image

Open the port popover for the \vuoNode{Make Noise Image} node's output port. It shows a small version of the image created by the node.

\vuoScreenshot{QuickStart-NoiseGlass-trace3}

Each time the \vuoNode{Make Noise Image} node does its job, it sends two pieces of information through its output port — the same event that came in the \vuoPort{Time} input port, accompanied by new data: the image created by the node.

The event and data then flow along the cable to the \vuoNode{Make Stained Glass Image} node's \vuoPort{Image} input port.

### Step 3: Make Stained Glass Image to Render Image to Window

Open the port popover for the \vuoNode{Make Stained Glass Image} node's output port.

\vuoScreenshot{QuickStart-NoiseGlass-trace4}

Now that the \vuoNode{Fire on Display Refresh}, \vuoNode{Make Noise Image}, and \vuoNode{Make Stained Glass Image} nodes have worked together to produce the image shown in the port popover, the final step is for the \vuoNode{Render Image to Window} node to display the image in a window.

### Summary

By tracing through the Quick Start composition, this section illustrated some skills and concepts for understanding how a composition works.

   - You learned that Vuo has two basic kinds of information: data and events.
   - You opened port popovers to reveal the data and events flowing through the composition.
   - You watched two types of data, numbers and images, flowing through the composition.
   - You observed the rate at which events were prompting nodes to do their jobs.


## Learning Vuo
<abstract>Resources to help you get started</abstract>

Now that you've perused the [Quick Start](#quick-start) and [Tracing through a composition](#tracing-through-a-composition) sections, you've been exposed to the key concepts underlying Vuo and are well on your way to creating your own custom compositions. Before digging deeper into those concepts, we'll mention some resources that teach Vuo in different ways. You can choose the path that best matches your learning style.

### User manual

The user manual (this document) provides the most detailed documentation of the concepts underlying Vuo and of Vuo's user interface. You may choose to read it all the way through, or you may refer to it when you have questions about a specific topic.

In Vuo's Help menu, you can use the search box to find topics within this manual.

Terms used in this manual are defined in the glossary at the end.

A high-contrast version of the manual is available on our [release notes page](https://vuo.org/release).

### Tutorials

Video tutorials are available on our [tutorials page](https://vuo.org/tutorials).

### Example compositions

Vuo comes with over 200 example compositions that demonstrate how to accomplish tasks in Vuo.

Example compositions can be quite helpful when learning how to use a node. Many nodes have relevant example compositions listed in their Node Documentation Panel.

\vuoImage{0.25}{nodelibrary-examples.png}

\tip{You can search for an example composition by name in the Help menu's Search box.}

To browse the list of all example compositions, go to \menu{File > Open Example}.

### Community support

The community of people who use Vuo can be an incredibly helpful resource when you're learning Vuo. As part of that community, you can discuss questions and answers on how to use Vuo, share compositions, and suggest features to improve Vuo. To get started, visit our [community site](https://community.vuo.org).

### Node documentation

Every built-in node and node set in Vuo comes with documentation that explains how to use it.

\vuoImage{0.25}{nodelibrary-documentation.png}

Alternatively, you can browse the [online node documentation](https://doc.vuo.org/VUO_VERSION/node/).

### SDK documentation

If you're a developer who would like to embed Vuo in an application or to implement custom nodes, you can explore the [API documentation](https://api.vuo.org/VUO_VERSION).

### Vuo in other applications

If you use [VDMX](https://vidvox.net/) (a VJ application that mixes and composites media), you can install Vuo compositions to add to your available visual effects. This manual explains how to set up your compositions in [Making compositions fit a mold with protocols](#making-compositions-fit-a-mold-with-protocols). To learn how to install and use compositions in VDMX, check out [their documentation](https://docs.vidvox.net/vdmx_vuo.html).


## Installing Vuo
<abstract>Setting up Vuo on your computer</abstract>

   - Go to [https://vuo.org/download](https://vuo.org/download).
   - Click the "Download Vuo" button.
   - Uncompress the ZIP file (double-click on it in Finder).
   - Move the Vuo application to your \directory{Applications} folder.
   - Open the Vuo application.
   - Follow the instructions in the dialogs.

### Activating Vuo Pro

If you've purchased Vuo Pro, you'll need to activate your license in the application.

After launching Vuo, when you reach the dialog below, click Activate Vuo Pro.

\vuoScreenshot{ActivateVuoPro1}

In the next dialog, follow the instructions to activate Vuo Pro.

\vuoScreenshot{ActivateVuoPro2}


## Changing language settings
<abstract>Using a Spanish, French, or German translation of the Vuo editor</abstract>

\newInVersion{2.0}

Vuo has been partially translated to *español* (Spanish), *français* (French), and *Deutsch* (German). If your computer is already using one of those languages, then the Vuo editor will appear in that language.

To change the language of Vuo and other applications:

   - In macOS System Settings, go to \menu{General > Language \& Region}.
   - Under "Preferred Languages", move the desired language to the top of the list.
   - Relaunch Vuo.

To change the language of Vuo only (macOS 10.15+):

   - In macOS System Settings, go to \menu{General > Language \& Region > Apps}.
   - Add Vuo and select the desired language.
   - Relaunch Vuo.

If you can help correct translations or translate Vuo to another language, we'd appreciate it! Please [contact us](https://vuo.org/contact).


# The basics
<abstract>The major concepts you need to understand when working with Vuo</abstract>

The previous section walked you through the steps of creating a simple composition. By now, you may know a bit about the process of composing with Vuo, but you may not understand exactly how compositions work or how make your own from scratch. This section introduces the major concepts you need to understand when working with Vuo.

If you prefer to learn by doing, we recommend that you read this section and then experiment with Vuo's example compositions to learn how to create your own. If you prefer to have a deeper understanding of the concepts underlying Vuo, we recommend that after this section you continue to the next sections, which cover the concepts in more detail — [How events and data travel through a composition](#how-events-and-data-travel-through-a-composition), [How compositions process data](#how-compositions-process-data), and [How nodes can be used as building blocks](#how-nodes-can-be-used-as-building-blocks).


## A composition is what you create with Vuo

\definition{composition}{A document you create in Vuo}

When musicians create a piece of music, they call it a composition. When you create something in Vuo, that's also called a \term{composition}.

In the [Quick Start](#quick-start) section, you saw how to create a composition that displays a moving twirly stripy design. That's one type of Vuo composition — an animation that displays in a window. Vuo can be used to create much more complex and interesting animations. It can also be used to create many other types of compositions. A composition could be a game. It could be an art installation. It could be a controller for stage lighting. It could be digital signage. It could be a plug-in for other software. Those are just some examples of what a composition could be.

\noteTextProgrammers{A composition is a program whose source code is a visual representation of the program's data flow. It's compiled and linked to create an application or library.}

One thing that all compositions have in common is the process of creating them in Vuo. You start with either a new canvas or an existing composition, and you pick out building blocks and connect them to make many smaller pieces work together as a larger whole.

Another thing that all compositions have in common is the way that they run. When you click the Run button, all of those building blocks and connections that you laid out as a blueprint get turned into a running application.


## Nodes are your building blocks
<abstract>Each node in Vuo has a specific job that it does</abstract>

\definition{node}{A building block that performs a specific job}

Each composition does something unique, and the way that you build up that something is by putting together \term{node}s. These are your building blocks.

Let's say you're creating a composition that displays a 3D model. You might use the \vuoNode{Fetch Scene} node to load the 3D model from a file and the \vuoNode{Render Scene to Window} node to render the model in a window.

\noteTextProgrammers{A node is like a function. It encapsulates a task. It takes inputs and produces outputs. More precisely, nodes are like class instance methods, since they can also maintain a state.}

\vuoNodeClassImage{vuo.scene.fetch}
\vuoNodeClassImage{vuo.scene.render.window}

Or suppose you're creating a composition that applies a color effect to a movie. You might use the \vuoNode{Play Movie} node to bring the movie into the composition, the \vuoNode{Adjust Image Colors} node to change the movie's color, and the \vuoNode{Save Images to Movie} node to save the color-changed movie to a file.

\vuoNodeClassImage{vuo.video.play}
\vuoNodeClassImage{vuo.image.color.adjust}
\vuoNodeClassImage{vuo.video.save}

Part of the process of creating a composition is taking your idea of what it should do and breaking that down into smaller tasks, where each task is carried out by a node. Each node in Vuo has a specific job that it does. Some nodes do simple jobs, like adding numbers or checking if two pieces of text are the same. Other nodes do something complex, like receiving a stream of video from a camera, finding a barcode in an image, or turning a 3D object into a wiggly blob. You can browse through a list of all the nodes available in the Node Library (the panel along the left side of the Vuo editor window) or the [online node documentation](https://doc.vuo.org/VUO_VERSION/node/).

When you start making a composition, often the first thing you'll do is pick a node from the Node Library. You can search the Node Library for what you want to do (for example, a search for "movie" brings up a list of nodes for playing, inspecting, and saving movies) and then drag the nodes you want onto the composition canvas.

You can learn about a node by looking at its title, node class name, and port names, which are pointed out in the illustration below. For a detailed description of how the node works, you can look at the node's documentation, which appears in the Node Documentation Panel in the lower part of the Node Library. Many nodes come with example compositions (listed in the node's documentation) that demonstrate the node in action.

\vuoImage{0.5}{nodeportnames.pdf}


## Events are what cause nodes to execute
<abstract>Events control when nodes do their job and how information flows between them</abstract>

\definition{event}{Controls when nodes do their job and how information flows between nodes}

Let's think again about creating a composition that applies a color effect to a movie. Your first step might be to drop a \vuoNode{Play Movie} node, an \vuoNode{Adjust Image Colors} node, and a \vuoNode{Append to Movie} node onto the canvas. Then what? How do you tell the composition that, first, you want \vuoNode{Play Movie} to bring the movie into the composition, second, you want \vuoNode{Adjust Image Colors} to apply the effect, and third, you want \vuoNode{Append to Movie} to save the movie to a file? The way that you control *when* nodes do their job and *how* information flows between them is with \term{event}s.

Here's a composition that simply displays some text on a window:

\noteTextProgrammers{Vuo is event-driven. The events are generated by trigger ports, and the event handlers are implemented by the nodes executed as the event travels through the composition.}

\vuoCompositionImage{DisplayHelloWorldImage}

\definition{fire}{Originate an event}
\definition{trigger port}{A port that \term{fire}s events}
\definition{execute}{Perform a specific job}

How do events come into play in this composition? This composition involves a single event that causes the text to render as soon as the composition starts running. The event is \term{fire}d (originates) from the \term{trigger port} called \vuoPort{Started} on the \vuoNode{Fire on Start} node. (A trigger port is a special kind of port, which you can recognize by the thick line along its left side.) The event travels to the \vuoNode{Make Text Image} node, causing that node to \term{execute} (do its job). The event then travels onward to the \vuoNode{Render Image to Window} node, causing it to execute as well. From the \vuoNode{Make Text Image} node to the \vuoNode{Render Image to Window} node, the event carries with it the image that was created by \vuoNode{Make Text Image} and will be rendered by \vuoNode{Render Image to Window}.

Here's a variation on that composition that involves multiple events:

\vuoCompositionImage{DisplayAndTwirlHelloWorldContinuously}

This composition displays an animation of the text becoming more and more twirled as time passes. It still has the event fired from the \vuoNode{Fire on Start} node's \vuoNode{Started} port when the composition starts. It also has events being fired from another trigger port: the \vuoNode{Fire on Display Refresh} node's \vuoPort{Refreshed at Time} port. Unlike the \vuoNode{Started} port, which fires only once, the \vuoPort{Refreshed at Time} port fires 60 times per second (or whatever your computer display's refresh rate is). Unlike the event from \vuoNode{Started} port, which is useful for doing something once, the events from the \vuoPort{Refreshed at Time} port are useful for doing something continuously, such as displaying an animation that changes smoothly over time. In the composition above, each of those 60 times per second that the \vuoPort{Refreshed at Time} node fires an event, that event (along with a piece of information that says how long the composition has been running) travels to the \vuoNode{Multiply} node. The event (along with the result of multiplying numbers) travels to the \vuoNode{Twirl Image} node. Finally, the event (along with the twirled image) travels to the \vuoNode{Render Image to Window} node. As the event travels along its path, it causes each node to execute in turn, and carries information with it from one node to the next.

Here's a composition that *doesn't* display text in the window (can you guess why?):

\vuoCompositionImage{DisplayHelloWorldNoEvent}

This composition doesn't have any events going into the \vuoNode{Make Text Image} node. Without any incoming events, the \vuoNode{Make Text Image} node never executes and never passes an image along to the \vuoNode{Render Image to Window} node. So no text is displayed. If you want a node to execute, make sure you feed it some events!

If you'd like to watch the events moving through a composition, you can do that by clicking the Show Events button in the toolbar. As the composition runs, you can see the events being fired from trigger ports, and you can trace the path of the event by watching each node change color as it executes.

\vuoScreenshot{editor-showevents}


## Trigger ports fire events and sometimes data
<abstract>Nodes with trigger ports are often responsible for bringing information into the composition from the outside world</abstract>

As you just saw, events are fired from trigger ports, which are special ports that some nodes have. Here are some examples of trigger ports:

\vuoImage{0.45}{triggerports.pdf}

The \vuoPort{Started} trigger port on the \vuoNode{Fire on Start} node fires a single event when the composition starts running. The \vuoPort{Fired at Time} trigger port on the \vuoNode{Fire Periodically} node fires events at a rate determined by the node's \vuoPort{Seconds} port. The \vuoPort{Pressed} trigger port on the \vuoNode{Receive Mouse Buttons} node fires an event each time the mouse button is pressed, and the \vuoPort{Released} trigger port fires an event each time the mouse button is released. The \vuoPort{Received Frame} trigger port on the \vuoNode{Receive Live Video} node fires events as it receives a stream of images from a camera.

\definition{data}{A piece of information}

Some trigger ports, like \vuoPort{Started}, fire just events. Other trigger ports, like \vuoPort{Pressed}, \vuoPort{Released}, and \vuoPort{Received Frame}, fire \term{data} (a piece of information) along with each event. The \vuoPort{Pressed} and \vuoPort{Released} ports fire the coordinates of the point where the mouse was pressed or released. The \vuoPort{Received Frame} port fires the video frame received from the camera. This data travels along with the event to the next node. When that node executes, it can use the data to do its job (such as drawing a shape at the given coordinates, or extracting an image from the given video frame).

Nodes with trigger ports are often responsible for bringing information into the composition from the outside world, such as video, audio, device input, and network messages. These nodes can be a good starting point when creating a composition. You can see a list of all nodes with trigger ports by searching the Node Library for "trigger" or "fire".

As just mentioned, one way to watch what trigger ports are doing in a composition is to run the composition with Show Events enabled. Another way is to click on the trigger port, which opens a view called the Port Popover. As the composition runs, the Port Popover shows how recently the trigger port fired an event and what data (if any) came with the event.

\tip{If you click on the Port Popover, it becomes a small window that you can leave open as you continue working and perhaps open other Port Popovers.}

\vuoScreenshot{portpopovers}


## Events and data travel through cables
<abstract>Thin cables only carry events, while thick cables carry both events and data</abstract>

Let's take yet another look at this composition that displays text in a window:

\vuoCompositionImage{DisplayHelloWorldImage}

\definition{cable}{A line connecting nodes; the conduit that data and events travel through}

The lines connecting the nodes are called \term{cable}s. Cables are the conduits that data and events travel through.

\definition{data-and-event cable}{A cable that carries both events and data}
\definition{event-only cable}{A cable that carries only events, not data}

In the composition above, an event travels along the cable from the \vuoPort{Started} trigger port of the \vuoNode{Fire on Start} node to the \vuoPort{Text} port of the \vuoNode{Make Text Image} node. An event and data travel along the cable from the \vuoPort{Make Text Image} node to the \vuoPort{Render Image to Window} node's \vuoPort{Image} port. Notice the difference between the two cables: the first cable is thinner since it only carries events (an \term{event-only cable}), while the second cable is thicker since it carries both events and data (a \term{data-and-event cable}).

\definition{upstream}{Nodes that execute before other nodes}
\definition{downstream}{Nodes that execute after other nodes}

Often it helps to think of cables as pipes that data and events flow through. Like water flowing through a pipe, events and data flow through the cable from one end to the other, always in the same direction. Extending the water analogy, you can think of trigger ports as being \term{upstream} and the nodes that their events flow to as being \term{downstream}.

But, unlike water flowing through a pipe, events and data travel as discrete packets instead of a continuous flow. Another way to think of a cable is as a one-way, one-lane road on which each event is a car. On some roads (data-and-event cables), each car carries a piece of data.

You can create a cable by dragging the mouse from one port to another. While you're dragging, the ports that you're allowed to connect the cable to are highlighted. If you're not allowed to connect a cable from one port to another, it's because the two ports have different, incompatible types of data. For example, you can't connect a port whose data is a number to a port whose data is a 3D model.

\vuoScreenshot{portcompatibility}


## Events and data enter and exit a node through ports
<abstract>Input ports receive information into a node, and output ports send information out of a node</abstract>

When an event (and possibly data) is fired from a trigger port and travels along a cable, what happens when it reaches the port on the other end of the cable?

\definition{input port}{Receives information into a node}

That port on the other end is called an \term{input port}. You can think of it as a portal that inputs (receives) information into the node.

\vuoCompositionImage{DisplayHelloWorldImage}

In the above composition, the \vuoPort{Text} input port of the \vuoNode{Make Text Image} node inputs an event, which causes the node to execute. The \vuoPort{Image} input port of the \vuoNode{Render Image to Window} node inputs the event and an image. When the node executes, it uses that image to do its job of rendering an image to a window.

\definition{constant value}{Data in an input port that doesn't have a connected data-and-event cable.}

You may have noticed that, in the above composition, some input ports have data that's attached to the port rather than coming in through a cable. The \vuoPort{Text} input port has the data "Hello World!", and the \vuoPort{Font} input port has as its data a description of a Helvetica font. These are called \term{constant value}s because they don't vary the way that data coming through a cable can. Like data coming in through cables, constant values are also used by the node when it executes. If a port has a constant value, you can edit it by double-clicking on it.

\definition{output port}{Sends information out of a node}

After a node executes, it outputs (sends) information through its \term{output port}s. The information outputted — events and possibly data — can then travel along cables from the output ports to other input ports.

\vuoImage{0.4}{inputoutputports.pdf}

On most nodes, every event that comes in through one or more inputs ports goes out of all of the output ports. But there are a couple of exceptions.

One exception is trigger ports. Although trigger ports are output ports, events that come in through input ports are never outputted through them. Trigger ports can only fire new events, not transmit existing events.

\definition{event wall}{Prevents an event from going out any of the node's output ports}
\definition{event door}{May or may not allow an event to go out any of the node's output ports (exact behavior depends on the node, and is explained in the node's documentation)}

The other exception is for nodes whose input ports have thick lines along their right side, which are called \term{event wall}s and \term{event door}s. If an event comes into a node only through an input port with a wall, then the event won't go out any of the node's output ports. If an event comes in only through an input port with a door, then the event may or may not go out of some or all of the node's output ports — the exact behavior depends on the node, and is explained in the node's documentation.

\tip{Both for trigger ports and for walls and doors, the thick line is a hint to remind you that events may be blocked.}

\vuoImage{0.45}{wallsdoors.pdf}

The composition below, Select Stripes (\menu{File > Open Example > Select}), demonstrates one way that event doors can be useful. This composition displays one of two animations at a time, switching between them each time the mouse is pressed. The doors on the \vuoNode{Select Input} node's \vuoPort{False Option} and \vuoPort{True Option} input ports allow the node to let the stream of events and images from one animation through while blocking the stream from the other animation.

\vuoCompositionImage{SelectStripes}

If you're not sure if a node is letting events through or blocking them, you can enable Show Events or look at Port Popovers to see where events are flowing.


## Events and data enter and exit a composition through published ports
<abstract>A composition as a whole has a specific job to perform — like a node, but on a larger scale</abstract>

Earlier, you learned that a composition is made up of nodes, each of which is a building block that has a specific job to perform. If you think about it, the composition as a whole also has a specific job to perform. It's like a node, but on a larger scale. A composition can even be used as a building block within another composition or another application.

\definition{published port}{Receives or sends data outside the composition}

Just as a node can input and output information through its ports, a composition can input and output information through \term{published port}s. If a composition has published ports, Vuo shows them in sidebars along the left and right sides of the composition canvas.

\vuoScreenshot{publishedports}

Above is an example of a composition with published ports: Generate Checkerboard Image (\menu{File > Open Example > Image Generator}). It inputs events and data through published input ports called \vuoPort{width}, \vuoPort{height}, and \vuoPort{time}. It outputs events and data through a published output port called \vuoPort{outputImage}.

You can use this composition as a building block, called a *subcomposition*, inside of another composition. Below is what that looks like — the published input and output ports of the composition become the input and output ports of a node. (You'll learn more about subcompositions in [Using subcompositions inside of other compositions](#using-subcompositions-inside-of-other-compositions).)

\vuoScreenshot{RenderCheckerboardImage}

Because this composition has a certain set of published ports, making it an *image generator*, you can use it in other special ways. You can install it as a plugin for a VJ application that supports Vuo plugins. You can run it in Vuo to see a preview of the video stream it would generate in a VJ application. You can export a movie of the video stream. (More about image generators is in [Making compositions fit a mold with protocols](#making-compositions-fit-a-mold-with-protocols).)

In all of these different ways of executing the composition — as a subcomposition, within a VJ application, as a preview, for a movie export — events and data enter the composition through its published input ports, flow through the composition, and exit through the published output ports.



# How events and data travel through a composition
<abstract>Events are what make things happen in a composition</abstract>

Events are what make things happen in a composition. As you get to know Vuo, you'll be able to look at a composition and imagine how an event comes out of a trigger port, flows through a cable into a node's input port, and either gets blocked or flows through the node's output ports and into the next cables. The previous section gave an overview of how that works. This section describes the process in detail.


## Where events come from

Each event is fired from a \term{trigger port}, a special kind of output port on a node.

\vuoImage{0.45}{triggerports.pdf}

Some trigger ports fire events in response to things happening in the world outside your composition. For example, the \vuoNode{Receive Mouse Moves} node's trigger port fires an event each time the mouse is moved. The \vuoNode{Play Movie} node's trigger port fires a rapid series of events (for example, 30 per second), so that you can display images in rapid sequence as a movie. Similarly, the \vuoNode{Fire on Display Refresh} node's \vuoPort{Refreshed at Time} trigger port fires a rapid series of events, so that you can use these events to display graphics in rapid sequence as an animation.

Other trigger ports fire events in response to things happening within the composition. For example, the \vuoNode{Fire on Start} node's trigger port fires an event when the composition starts. The \vuoNode{Fire Periodically} node's trigger port fires events at a steady rate while the composition is running. A node's trigger port can even fire in response to an event received by the node, as happens with the \vuoNode{Spin Off Event} node. (However, this is a *different* event than the one that was received by the node. For more information, see the section [Run slow parts of the composition in the background](#run-slow-parts-of-the-composition-in-the-background).)

Some nodes block events until a certain condition is met. The node \vuoNode{Became True}, for example, only lets an event through when the condition changes from false to true. These nodes are not trigger nodes, since they don't create events, but they control when events are output.


## How events travel through a node
<abstract>Cables, input ports (sometimes with walls, doors, and port actions), and output ports (sometimes trigger ports)</abstract>

An event can come into a node through cables connected to one or more of its input ports. When an event reaches the node's input ports, the node executes, and it may or may not send the event through its output ports.

### Input ports

\vuoImage{0.45}{inputports.pdf}

An \term{input port} is the location on the left side of the node where you can enter data directly, connect a data-and-event cable, or connect an event-only cable. When an event arrives at an input port, it causes the node to execute and perform its function based on the data present at the node's input ports.

#### Event walls and doors

Some nodes, like the ones shown below, have input ports that block an event. This means the node will execute, but the event associated with that data won't travel through any output ports. Event blocking is useful when you want part of your composition to execute in response to events from one trigger port but not events from another trigger port, or when you're creating a feedback loop.

\vuoImage{0.45}{wallsdoors.pdf}

Ports that always block events have a solid semi-circle (like the \vuoPort{URL} port above) or a solid chevron (like the \vuoPort{Start} port above).  This is called an \term{event wall}. The node must receive an event from another port without an event wall for the results of the node's execution to be available to other nodes.

\tip{The event wall is visually placed inside the node to indicate that the event gets blocked inside the node (as it executes) — rather than getting blocked before it reaches the node.}

Ports that sometimes block events have a broken semi-circle (like the \vuoPort{Which} port above) or a broken chevron (like the \vuoPort{Time} port above).  This is called an \term{event door}. Event doors are useful when you want to take events from a trigger port and filter some of them out or route them to different parts of the composition. For example, in the \vuoNode{Select Output} node, the value at the \vuoPort{Which} port will determine whether the data-and-event coming into the \vuoPort{In} port will be transmitted to the \vuoPort{Option 1} port or the \vuoPort{Option 2} port.

The manual section [How events travel through a composition](#how-events-travel-through-a-composition) has more information on how events move through a composition.

#### Port actions

Some input ports cause the node to do something special when they receive an event. In the \vuoNode{Count within Range} node shown below, the \vuoPort{Increment}, \vuoPort{Decrement}, and \vuoPort{Set Count} ports each uniquely affect the count stored by the node — upon receiving an event, they increment the count, decrement the count, or change the count to a specific number. Likewise, in the \vuoNode{Display Console Window} node, the \vuoPort{Write Line} input port does something special when it receives an event — it writes a line of text to the console window. Each of these ports has a *port action*.

\vuoImage{0.5}{portactions.pdf}

\definition{port action}{A port that causes the node to do something different when it receives an event than it does when any other input port receives an event}

If an input port has a \term{port action}, then the node does something different when that input port receives an event than it does when any other input port receives an event. What counts as "something different"? Either the node outputs different data (immediately or later) or the node affects the world outside the composition differently.

Looking again at the \vuoNode{Count within Range} node, you can see that the node has some input ports with port actions and some without. For the ports without port actions — \vuoPort{Minimum}, \vuoPort{Maximum}, and \vuoPort{Wrap Mode} — the node will output the same number regardless of whether the event causing the node to execute has hit one of these ports. The node uses the data from these ports and doesn't care if they received an event. For each of the ports with port actions, however, it makes a difference whether the event has hit the port. The \vuoPort{Increment} port, for example, only affects the count if the event came in through that input port.

Rather than affecting the node's output data, as in the \vuoNode{Count within Range} node, the \vuoNode{Display Console Window} node's port action affects the world outside the composition. When the \vuoPort{Write Line} input port receives an event, it doesn't affect the data coming out of the node's output ports. Rather, it affects what you see in the console window.

You can recognize an input port with a port action by the little triangle to the right of the port name. In Vuo, the triangle shape symbolizes events. The little triangle for the port action reminds you that this port does something unique when it receives an event.

### Output ports

When an event executes a node, the event can travel to downstream nodes using the \term{output port}s. Like input ports, output ports can be data-and-event or event-only.

\vuoImage{0.45}{outputports.pdf}

#### Trigger ports

Although trigger ports can *create* events, they never *transmit* events that came into the node through an input port (hence the thick line to the left of each trigger port — an event wall), nor do they cause any other output ports to emit events.


## How events travel through a composition
<abstract>The 6 rules of events, and common event flow patterns</abstract>

Now that you've seen how events travel through individual nodes, let's look at the bigger picture: how they travel through a composition.

\noteTextProgrammers{This section is about Vuo's mechanisms for control flow and concurrency.}

### The rules of events

Each event travels through a composition following a simple set of rules:

   1. **An event travels forward through cables and nodes.** Along each cable, it travels from the output port to the input port. Within each node, it travels from the input ports to the output ports (unless it's blocked). An event never travels backward or skips around.
   2. **One event can't overtake another.** If multiple events are traveling through the same cables and nodes, they stay in order.
   3. **An event can split.** If there are multiple cables coming out of a trigger port or other output ports, then the event travels through each cable simultaneously.
   4. **An event can rejoin.** If the event has previously split and gone down multiple paths of nodes and cables, and those paths meet with multiple cables going into one node, then the split event rejoins at that node. The node waits for all pieces of the split event to arrive before it executes.
   5. **An event can be blocked.** If the event hits an event wall or door on an input port, then although it will cause the node to execute, it may not transmit through the node.
   6. **An event can travel through each cable at most once.** If a composition could allow an event to travel through the same cable more than once, then the composition is not allowed to run. It has an infinite feedback loop error.

Let's look at how those those rules apply to some actual compositions.

### Straight lines

The simplest event flow in a composition is through a straight line of nodes, like the composition below.

\vuoCompositionImage{Count}

In this composition, the \vuoPort{Fired at Time} trigger port fires an event every 10 seconds. Each event travels along cables and through the \vuoNode{Count} node, then the integer-to-text type converter node, then \vuoNode{Display Console Window} node. The event is never split or blocked.

### Splits and joins

When you run a composition in Vuo, multiple nodes can execute at the same time. This takes advantage of your multicore processor to make your composition run faster.

\vuoCompositionImage{CountScatter}

In this composition, the two \vuoNode{Count} nodes are independent of each other, so it's OK for them to execute at the same time. When the \vuoNode{Fire Periodically} node fires an event, the upper \vuoNode{Count} node might execute before the lower one, or the lower one might execute before the upper one, or they might execute at the same time. It doesn't matter! What matters is that the \vuoNode{Add} node waits for input from both of the \vuoNode{Count} nodes before it executes.

The \vuoNode{Add} node executes just once each time \vuoNode{Fire Periodically} fires an event. The event branches off to the \vuoNode{Count} nodes and joins up again at \vuoNode{Add}.

### Multiple triggers

\vuoCompositionImage{2Recur}

In this composition, the \vuoNode{Add} node executes each time either \vuoNode{Fire Periodically} node fires an event. If one of the \vuoNode{Add} node's inputs receives an event, it doesn't wait for the other input. It goes ahead and executes.

If the two \vuoNode{Fire Periodically} nodes fire an event at nearly the same time, then the \vuoNode{Count} nodes can execute in either order or at the same time. But once the first event reaches the \vuoNode{Add} node, the second event is not allowed to overtake it. (Otherwise, the second event could overwrite the data on the cable from \vuoNode{Add} to \vuoNode{Display Console Window} before the first event has a chance to reach \vuoNode{Display Console Window}.) The second event can't execute \vuoNode{Add} or \vuoNode{Display Console Window} until the first event is finished.

Compare this composition to the one above it. Since in this composition the \vuoNode{Fire Periodically} nodes can execute in either order, or at the same time, the results are unpredictable. When you want to ensure events are executed by separate nodes at the same time, use the *same* event.

### Feedback loops

\definition{feedback loop}{A group of nodes connected by cables forming a loop, causing the group's latest output to be affected by the group's prior output}

You can use a \term{feedback loop} to store and build upon a result over time. This example composition demonstrates (\menu{File > Open Example > Data > Twirl Image Repeatedly}):

\vuoCompositionImage{TwirlImageRepeatedly}

Starting with the image from \vuoNode{Fetch Image}, this composition adds another twirl to the image with each display refresh. Over time, the entire image accumulates twirls upon twirls.

The orange and gray nodes, and the cables between them, comprise the feedback loop. Let's focus on the part of the loop that stores and repeatedly processes the image: \vuoNode{Hold Value}, \vuoNode{Select Latest}, and \vuoNode{Twirl Image}. Each time \vuoNode{Fire on Display Refresh} fires an event:

   - The event enters the \vuoNode{Hold Value} node's \vuoPort{Update} input port.
   - The \vuoNode{Hold Value} node executes, outputting the event plus the image produced the previous time around the loop (or an empty image if this is the first time around).
   - The event plus image enters the \vuoNode{Select Latest} node's \vuoPort{Option 2} input port.
   - The \vuoNode{Select Latest} node executes, outputting the event plus the image from \vuoNode{Hold Value} (or the original image from \vuoNode{Fetch Image} if this is the first time around).
   - The event plus image enters the \vuoNode{Twirl Image} node's \vuoPort{Image} input port.
   - The \vuoNode{Twirl Image} node executes, outputting the event plus an image with one additional twirl.
   - The event plus image hits the \vuoNode{Hold Value} node's \vuoPort{Value} input port.
   - The \vuoNode{Hold Value} node executes, although it doesn't have any visible effect. It doesn't output any event or data because the event is blocked at the input port's event wall.

With each event fired from \vuoNode{Fire on Display Refresh}, these steps repeat and the image gains another twirl.

For each event from \vuoNode{Fire on Display Refresh}, when exactly does the \vuoNode{Hold Value} node output an image to \vuoNode{Render Image to Window}? The first time \vuoNode{Hold Value} executes, the second time, or both times? The answer is: Only the first time.

   - The first time \vuoNode{Hold Value} executes:
      - The event hits the \vuoPort{Update} input port.
      - The node executes.
      - The event plus data travels out of the output port through all connected cables, including the one to \vuoNode{Render Image to Window}.
   - The second time \vuoNode{Hold Value} executes:
      - The event hits the \vuoPort{Value} input port.
      - The node executes.
      - Nothing further happens. The event is blocked by the wall on the input port.

### Summary

You can control how your composition executes by controlling the flow of events. The way that you connect nodes with cables — whether in a straight line, a feedback loop, or branching off in different directions — controls the order in which nodes execute. The way that you fire and block events — with trigger ports and with event walls and doors — controls when different parts of your composition will execute.

Each event that's fired from a trigger port has its own unique identity. The event can branch off along different paths, and those paths can join up again at a node downstream. When the *same* event joins up, the joining node will wait for the event to travel along all incoming paths and then execute just once. But if two *different* events come into a node, the node will execute twice. So if you want to make sure that different parts of your composition are exactly in sync, make sure they're using the same event.


## How data travels through a composition
<abstract>Data flows through data-and-event cables</abstract>

Most often, data and events travel together. In most compositions, including the example below, the majority of cables are data-and-event (thick) cables. Whenever an event travels through one of these cables, it's accompanied by a piece of data — like the color that travels from \vuoNode{Select Input} to \vuoNode{Make Rectangle Layer}.

\vuoCompositionImage{ChangeColorWithButton}

\tip{The antenna symbols in this composition indicate a hidden cable from the \vuoPort{Updated Window} output port to the \vuoPort{Window} input port. To hide a cable, right-click on it and select \menu{Hide}.}

When an event and its companion piece of data reach a node's input port, the event causes the node to do its job, while the data affects how the node does its job. (This is explained further in [How compositions process data](#how-compositions-process-data).)

Data generally doesn't travel *through* a node in the same way that an event does. Instead, the node, informed by its input data, produces other data as output.

### Ignoring data

Sometimes you don't want the data that a node outputs. You just want the events.

One example is the composition below. The \vuoNode{Fire Periodically} node's trigger port fires an event along with data — the number of seconds since the composition started — every 3 seconds. The \vuoNode{Speak} node doesn't need or want that data. It just needs the event.

To create an event-only cable like the one below, start dragging from the \vuoPort{Fired at Time} port (pulling out a data-and-event cable), then drop the end of the cable onto the \vuoPort{Speak} input port. When you connect a data-and-event cable to an event-only port, the cable automatically becomes event-only.

\vuoCompositionImage{SpeakPeriodically}

It's also possible to connect an event-only cable between a pair of data-and-event ports. This can be useful with the \vuoNode{Count} node, as shown below. Each time the \vuoNode{Count} node executes, it adds the amount in its \vuoNode{Increment} port to the total that it outputs. Let's say you want to count up by 1 every 10 seconds. To control the timing, you can use the events from the \vuoNode{Fire Periodically} node's trigger port, but you need to ignore the data from that port. You can accomplish this with an event-only cable.

To create this event-only cable, start dragging from the \vuoPort{Fired at Time} port. Hold down \keys{⇧} (Shift) to change the cable from data-and-event to event-only, then drop the end of the cable onto the \vuoPort{Increment} port.

\vuoCompositionImage{Count}

Alternatively, \newInVersion{2.0} you can drag the cable from the \vuoPort{Fired at Time} port and drop it into the title area of the \vuoPort{Count} node. Dropping the end of a cable onto a node's title area changes the cable to event-only and connects it to the node's first non-walled port.

### Data flow without an event

There are only two cases in which data can travel without an event: from a *drawer* to its attached node and from a *published input port* through directly connected cables. Both are explained later, in the section [Inputting data](#inputting-data).

In all other cases, the only way that data can travel through a composition is when accompanied by an event.


## Solving problems with event flow
<abstract>Infinite feedback loops, deadlocked feedback loops, and buildup of events</abstract>

Events are a powerful tool, as they make it possible for you to control exactly when each node in your composition executes. However, events fired at the wrong place or time can lead to problems. This section covers several problems you might encounter and the ways that Vuo can help you identify and fix them.

### "Infinite feedback loop" error

\definition{infinite feedback loop}{A \term{feedback loop} that a single event could loop through repeatedly without being blocked by an \term{event wall}.}

One of the [rules of events](#the-rules-of-events) is that an event can travel through each cable at most once. This rule comes into play when your composition has a [feedback loop](#feedback-loops).

As you learned earlier in this section, feedback loops are a useful construct for accumulating changes over time. You just need to regulate the flow of data through the loop. Here are examples of a working (regulated flow) and a non-working (unregulated flow) feedback loop:

\vuoScreenshot{CountWithFeedback}

\vuoScreenshot{CountWithInfiniteFeedback}

In the working feedback loop:

   - The event enters the \vuoNode{Hold Value} node's \vuoPort{Update} input port and travels through to the output port.
   - The event enters the \vuoNode{Add} node's input port and travels through to the output port.
   - The event hits the \vuoNode{Hold Value} node's \vuoPort{Value} input port and is blocked by the event wall.

In the non-working feedback loop, there's no wall to block the event from looping through the \vuoNode{Add} node over and over. Vuo reports an \term{infinite feedback loop} and doesn't allow the composition to run.

Comparing the two compositions above, you can see that one way to fix an infinite feedback loop is to insert a node with an event wall, such as \vuoNode{Hold Value}.

Another way to fix an infinite feedback loop is to get rid of the feedback loop. In the composition above, you could replace the feedback loop with a \vuoNode{Count} node. The \vuoNode{Enqueue} node and the \vuoNode{Blend Image with Feedback} node can also take the place of some feedback loops.

Rarely, you might encounter situations where Vuo reports an infinite feedback loop even though you can logically reason that the loop is finite — like in this composition:

\vuoScreenshot{CountWithRepeatingFeedback}

The event would only circle the loop 10 times, so it's not "infinite". Nevertheless, you'll need to restructure your composition to avoid the error. When iterating through a fixed number of items, you can use a \vuoNode{Build List}, \vuoNode{Process List}, or \vuoNode{Spin Off Events} node. (Alternatively, you can circumvent the error by inserting a \vuoNode{Spin Off Event} node in the loop, but be aware that you could create an actual infinite feedback loop that causes your composition to freeze.)

### "Deadlocked feedback loop" error

\definition{deadlocked feedback loop}{A \term{feedback loop} where it's impossible for an event to travel through all the cables leading up to a node before reaching the node itself}

In most cases, an event needs to travel through all of the cables leading up to a node before it can reach the node itself. (The one exception is the node that starts and ends a feedback loop, since it has some cables leading into the feedback loop and some coming back around the loop.) A problem can arise if the nodes and cables in a composition are connected in a way that makes it impossible for an event to travel through all the cables leading up to a node before reaching the node itself. This problem is called a \term{deadlocked feedback loop}. If your composition has one, Vuo will tell you so and won't allow your composition to run.

\vuoScreenshot{DeadlockedFeedbackLoop}

This composition is an example of a deadlocked feedback loop. Because the top \vuoNode{Hold Value} node could receive an event from the \vuoNode{Fire on Start} node through the cable from the bottom \vuoNode{Hold Value} node, the top \vuoNode{Hold Value} node needs to execute after the bottom one. But because the bottom \vuoNode{Hold Value} node could receive an event from the \vuoNode{Fire on Start} node through the cable from the top \vuoNode{Hold Value} node, the bottom \vuoNode{Hold Value} node needs to execute after the top one. Since each \vuoNode{Hold Value} node needs to execute after the other one, it's impossible for an event to travel through the composition. To fix a deadlocked feedback loop, you need to remove some of the nodes or cables involved.

### Buildup of events

\definition{event throttling}{Controls whether a trigger port will \term{enqueue events} or \term{drop events}}
\definition{enqueue events}{The trigger port will keep firing events regardless of whether the downstream nodes can keep up}
\definition{drop events}{The trigger port won't fire an event if the event would have to wait for the downstream nodes to finish processing a previous event (from this or another trigger port)}

What if a trigger port is firing events faster than the downstream nodes can process them? Will the events get queued up and wait until the downstream nodes are ready (causing the composition to lag), or will the composition skip some events so that it can keep up? That depends on the trigger port's \term{event throttling} setting.

Each trigger port has two options for event throttling: \term{enqueue events} or \term{drop events}. If enqueuing events, the trigger port will keep firing events regardless of whether the downstream nodes can keep up. If dropping events, the trigger port won't fire an event if the event would have to wait for the downstream nodes to finish processing a previous event (from this or another trigger port).

Each of these options is useful in different situations. For example, suppose you have a composition in which a \vuoNode{Play Movie} node fires events with image data and then applies a series of image filters. If you want the composition to display the resulting images in real-time, then you'd probably want the \vuoNode{Play Movie} node's trigger port to drop events to ensure that the movie plays at its original speed. On the other hand, if you're using the composition to apply a video post-processing effect and save the resulting images to file, then you'd probably want the trigger port to enqueue events.

When you add a node to a composition, each of its trigger ports may default to either enqueuing or dropping events. For example, the \vuoNode{Play Movie} node's trigger port defaults to dropping events, while each of the \vuoNode{Receive Mouse Clicks} node's trigger ports defaults to enqueuing events.

You can right-click on a trigger port and go to the \menu{Set Event Throttling} menu to view or change whether the port enqueues or drops events.



# How compositions process data
<abstract>Single-value, list, dictionary, and generic data types</abstract>

Data is information such as numbers, text, and images. Nodes use the data in their input ports to control how they do their job. The goal of a composition is almost always to create or transform data in some way.

## Data types

\definition{data type}{The format of a piece of information, such as numeric or textual}

Numbers, text, and images are all examples of data — but they're not all the same type of data. You can do things with a number (such as calculate the square root) that wouldn't make sense with a sentence of text. Similarly, you can do things with an image (such as applying a kaleidoscope filter) that wouldn't make sense with a number.

In Vuo, data is categorized by \term{data type}. A node can only input and output certain data types that make sense with the job that the node does, such as calculating numbers or filtering images.

### Basic data types

Here are the most common data types in Vuo:

| Name | Examples | Description |
|------|----------|-------------|
| Integer | -5; 0; 103 | A positive or negative whole number |
| Real | -1.2; 0.0; 33.333 | A positive or negative decimal number |
| Text | *Thank you!* | A sequence of characters |
| Boolean | *true*; *false* | "Yes" (*true*) or "no" (*false*) |
| 2D Point | (0.1, -1.5) | A position in 2-dimensional space |
| 3D Point | (0.1, -1.5, 0.8) | A position in 3-dimensional space |
| 4D Point | (0.1, -1.5, 0.8, 1.0) | A position in 4-dimensional space |
| Color | | A combination of hue, saturation, and lightness |
| Image | | A rectangular grid of pixels |
| Layer | | A 2D shape or image that can be stacked with others |
| Scene Object | | A 3D shape that can be placed with others in a scene |

If your computer is configured to use a comma instead of a period for the decimal mark (\menu{System Settings > General > Language \& Region}), then Vuo displays numerical types accordingly.

Vuo has dozens of other data types, many of them specific to certain tasks (such as processing audio or receiving keyboard input). You'll learn about those data types in the process of learning how to perform the tasks.

You can see which data type a port has by clicking on the port to open its port popover.

\vuoScreenshot{MakeTextImage-popovers}

When you start dragging a cable from a port, Vuo shows you which ports you can connect the other end of the cable to — ports that have a compatible data type — by fading out all other ports. Ports that remain opaque have the same data type as the original port. Ports that are slightly faded have a data type that is different but related, so it's possible to convert from one data type to the other.

### Type-converter nodes

\definition{type-converter node}{A node that translates data from one type to another}

The two ports at either end of a cable always have the same data type. If you need to connect an output port of one data type to an input port of a different but related data type, you can insert a \term{type-converter node}. A type-converter node's job is to translate data from one type to another.

When you drop a cable endpoint onto a port of a different but compatible data type, either Vuo will ask you to choose which type-converter node to use or, if there's only one type-converter node available for that pair of data types, Vuo will go ahead and insert it.

For example, if you want to connect a Real output port to an Integer input port, you can choose the \vuoNode{Round}, \vuoNode{Round Up}, or \vuoNode{Round Down} node to convert the Real (number with a decimal point) to an Integer (number without a decimal point).

\vuoScreenshot{ConvertRealToInteger-menu}

Vuo inserts the type-converter node in a collapsed form to save space. You can still click on the node to see its uncollapsed form and description in the Node Documentation Panel. When you connect another cable to the same input port as the collapsed type-converter node, Vuo expands it in order to visually clarify how the cable connections are happening.

\vuoScreenshot{ConvertRealToInteger}

### List data types

For every single-value data type in Vuo, there's a corresponding list data type.

For example, the \vuoNode{Split Text} node inputs a single Text and separates it into parts. Each part is a Text. The node outputs the collection of parts as a Text List.

\vuoScreenshot{SplitText}

\definition{list}{A sequence of data items}

A \term{list} is a sequence of data items. Lists are useful when you want to work with a collection of data items instead of just one.

### Dictionary data types

\definition{dictionary}{A set of data items that can be looked up by name}

With a list, each item is identified by its position in the sequence. With a different kind of collection called a \term{dictionary}, each item is instead identified by a name or *key*.

For example, the \vuoNode{Calculate} node's \vuoPort{Values} input port has a dictionary data type, specifically Dictionary of Text keys and Real values. The keys are the names of variables in a math expression. The values are the numerical values that the node should substitute in place of the variables to calculate the result.

\vuoCompositionImage{CalculateVolume}

### Ports with changeable data types

Some nodes can work with many different types of data. For example, the \vuoNode{Scale} node can scale Reals, 2D Points, 3D Points, or 4D Points. The \vuoNode{Changed} node can input a Text value, an Image, a Color, or many other types of data.

\vuoNodeClassImage{vuo.math.scale}
\vuoNodeClassImage{vuo.event.changed2}

When using nodes that are flexible about the type of data they can work with, you can choose the data type that you need for your composition.

To see the data types that a port can be changed to, right-click on the port and look at the \menu{Set Data Type} submenu. (Only ports with changeable types have a \menu{Set Data Type} submenu.)

\vuoScreenshot{Add-setDataType}

\changedInVersion{2.0}{The Set Data Type menu now appears for all changeable data types, not just generic data types. You no longer need to change the data type back to generic before changing it to a different type.}

#### Generic data types

\definition{generic data type}{a stand-in used when a port has a changeable data type and the data type hasn't been decided yet}

The \menu{Generic} menu item means that the port has a \term{generic data type} — a stand-in for when the port's data type hasn't been decided yet.

For example, when you first put a \vuoNode{Hold Value} node on the canvas, its \vuoPort{Value} input port and \vuoPort{Held Value} output port both have a generic data type.

\vuoScreenshot{HoldValue-generic}

#### Changing the data type

When a port has a changeable data type, one way to change it is to use the \menu{Set Data Type} submenu. Another is to connect a cable.

When you start drawing a data-and-event cable from a port with a changeable data type (or indeed from any port), Vuo fades out the ports with incompatible data types, leaving the ports that the cable can potentially connect to. Here are some examples of the kinds of connections you can make.

**Connect an unchangeable port to a generic port** — The \vuoNode{Make Cube} node has a \vuoPort{Material} input port that controls how the sides of the cube are painted. The port has a changeable data type that starts out generic and can be changed to Color, Graphics Shader, or Image. If you put a \vuoNode{Make Cube} node on the canvas and connect a cable carrying Image data to it, then the port's data type changes from generic to Image.

\vuoScreenshot{MakeCube-Image}

**Connect an unchangeable port to a changeable port** — Following on the previous example, suppose you change your mind and decide you'd like to paint the cube with a Graphics Shader instead of an Image. If you connect a cable between the \vuoPort{Material} port and a port of type Graphics Shader, then the \vuoPort{Material} port's data type changes from Image to Graphics Shader.

\vuoScreenshot{MakeCube-Shader}

Sometimes there are different ways that you could make the connection depending on what you're trying to accomplish, so Vuo presents some suggestions and asks you to choose. For example, if you're connecting an \vuoNode{Add} node's Real output port to a 2D Point input port, you might want to change the \vuoNode{Add} node's output port from Real to 2D Point. Or you might want to keep the \vuoNode{Add} node's output port a Real and use it to control the X-coordinate of the 2D Point. You can choose either of those options (among others) from the menu presented when you drop the cable onto the 2D Point port.

\changedInVersion{2.0}{This menu now gives you the option to change the port's data type.}

\vuoScreenshot{AddReal-Twirl}

**Connect a changeable port to a changeable port** — When connecting two ports that both have changeable data types, you're likely to have even more options. If you drag a cable from an \vuoNode{Add} node's Real output port and drop it onto a different \vuoNode{Add} node's 2D Point input port, you can opt to change the input port's data type to Real or insert various type converters. If you drag a cable in the other direction, from the input port to the output port, you instead have the option to change the *output* port's data type to 2D Point.

\vuoScreenshot{AddReal-Add2DPoint}

\vuoScreenshot{Add2DPoint-AddReal}

#### Groups of ports that share the same data type

When you connect cables between two ports of changeable data types, their data types become synchronized. If you change one port's data type, then the other port's data type automatically changes to match.

Some nodes have ports that are synchronized with each other. The \vuoNode{Subtract} node is an example. It can subtract two Integers, resulting in another Integer; two 3D Points, resulting in another 3D Point; and so on. When you change the data type of one of the node's ports, that automatically changes the data types of the other ports as well.

\vuoScreenshot{Subtract-popovers}

On a few nodes, one group of ports shares the same data type and a separate group of ports shares another data type. The \vuoNode{Process List} node is an example. The \vuoPort{Start Processing} port has a list data type, and the \vuoPort{Item} port outputs the items of that list. So if \vuoPort{Start Processing} has type Text List, \vuoPort{Item} must have type Text. Similarly, the \vuoPort{Finished Processing} port has a list data type, and its items must match the type of \vuoPort{Processed Item}. But \vuoPort{Processed Item} doesn't have to match the type of \vuoPort{Item}.

\vuoScreenshot{ProcessList-popovers}

You can see which ports on a node share a data type by selecting \menu{Set Data Type > Generic} for each port, then opening the port popovers and observing the numbers on the generic data types (*generic #1*, *generic #2*, etc.).

## Inputting data
<abstract>Constant values, input editors, and drawers</abstract>

You've learned how data flows through a composition ([How events and data travel through a composition](#how-events-and-data-travel-through-a-composition)). But how does the data get into the composition in the first place?

There are two main ways. One is to pull in data from the world outside the composition — files on your computer, input devices such as a mouse or video camera, information communicated over a network, and so on. A good starting point to learn about this is to search the Node Library for nodes whose titles begin with *Receive*.

The other way to get data into a composition is to enter it yourself. This section explains how.

### Editing data in a node's input port

If an input port doesn't have a data-and-event cable connected to it, then it has a \term{constant value}. Rather than being replaced with new data coming in from a cable, the port's value remains the same as the composition runs.

\vuoScreenshot{BlendImages-constantValues}

\definition{input editor}{A widget for setting the value of an input port}

For many data types, the constant value is displayed alongside the input port. You can double-click on the constant value to open an \term{input editor} and edit the value.

\vuoScreenshot{BlendImages-inputEditor}

Different data types have different kinds of input editors. Some data types aren't editable. Double-clicking on them doesn't open an input editor. The only way to change their value is by connecting a cable.

You can close most input editors (keeping the edits) by clicking on the canvas or pressing \keys{↵}. In input editors for Text data, since the \keys{↵} key is taken, you can enter a linebreak with \keys{⌥↵}. You can cancel edits by pressing \keys{⎋}.

After you edit an input port's data, the new data will take effect the next time the node executes. If there's already a steady stream of events flowing through the node, like the \vuoNode{Outline Image} node below, the new data will naturally enter into the flow.

\vuoCompositionImage{OutlineVideo}

If events only rarely hit the node, like the \vuoNode{Make Text Layer} node below, then, in order to see the results of the new data, you'll have to either restart the composition or fire an event into the node manually. To fire an event manually, right-click on one of the node's input ports and select \menu{Fire Event}.

\vuoCompositionImage{CaptionVideo}

If you edit an input port value on a node that has a trigger port, the new data will take affect immediately. You don't have to fire an event into the node. For example, after you edit the \vuoPort{Seconds} input port of a \vuoNode{Fire Periodically} node, the node immediately adjusts the rate at which it fires.

\vuoNodeClassImage{vuo.time.firePeriodically2}

### Editing data in a published input port

Like an input port on a node, a published input port can have a constant value. (The exception is protocol published input ports, which are explained in [Making compositions fit a mold with protocols](#making-compositions-fit-a-mold-with-protocols).)

You can edit a published input port's constant value by double-clicking on the port, which brings up an input editor.

If the published input port has a numerical data type, you can also edit the input editor's range. Right-click on the published port and go to \menu{Edit Details…}. Suggested Min and Suggested Max are the recommended lower and upper bounds of the data value. If both are set, then the input editor will have a slider, a text field, and up and down arrows. Otherwise, the input editor will only have a text field and up and down arrows. Suggested Step controls the step size of the up and down arrows.

If you're running the composition as a standalone composition (not a subcomposition), after you edit a published input port's data, the new data will immediately flow through any cables directly connected to the published input port — but no farther. This is a rare case in which data flows without an event.

For example, in the composition below, if you change the value of \vuoPort{TextPosition} from (0, 0) to (1, 1), the value of the \vuoPort{Position} port on \vuoNode{Make Text Layer} immediately changes to (1, 1). But the \vuoNode{Make Text Layer} node doesn't execute and doesn't affect any nodes downstream — so the text in the window remains at (0, 0) for the moment. The next time \vuoPort{Fire Periodically} fires an event, the event hits \vuoNode{Make Text Layer}, causes the node to execute with the new \vuoPort{Position} value, and travels onward along with the resulting data to \vuoNode{Render Layers to Window} — so the text in the window now appears at (1, 1).

\vuoScreenshot{Countdown}

To learn about constant values of published input ports in subcompositions, see [this section](#constant-input-port-values).

### Inputting lists

\definition{drawer}{An attachment to a port that lets you input each item of a list or dictionary separately}

When an input port has a list data type, you can either input the list as a whole (by connecting a cable to the list port) or input each list item separately via the \term{drawer} attached to the port.

\vuoImage{0.6}{Add-drawer.pdf}

You can change the number of list items by dragging the drawer's handle (bar along the bottom) up or down, or by right-clicking on the drawer and selecting \menu{Remove Input Port} or \menu{Add Input Port}.

### Inputting dictionaries

The \vuoNode{Calculate} and \vuoNode{Calculate List} nodes each have a drawer attached to their dictionary input port. The keys of the drawer adjust automatically when you edit the \vuoPort{Expression} input port's data. (You can't resize this drawer like you can a list drawer.)

On other nodes, dictionary input ports don't have drawers. Instead, you can connect a cable from the output of a \vuoNode{Make Dictionary} node.



# How nodes can be used as building blocks
<abstract>The list of all nodes called the Node Library</abstract>

Nodes are the building blocks of Vuo, which you can assemble in any way you can think of to create compositions. When you download Vuo, it comes with a large set of nodes that support 2D and 3D graphics, video, audio, networking, user interaction, and more. If you've purchased Vuo Pro, then you have some bonus nodes available to you. Whether you're using Vuo Community Edition or Vuo Pro, you can also download nodes by third-party developers to add to your collection.


## Finding out what nodes are available

Vuo has a list of all nodes called the Node Library. (If you don't see it, go to \menu{View > Node Library > Show Node Library}.) You can skim through the Node Library to see what's available, or use the search bar at the top. For example, if you're wondering if Vuo has nodes for working with hues, search for "hue" and you'll find several nodes related to color. For search tips, see [Searching for nodes](#searching-for-nodes).

For a complete list of built-in nodes, you can go to the [online node documentation](https://doc.vuo.org/VUO_VERSION/node/).

For even more nodes, you can visit the [node gallery](https://vuo.org/nodes). There, members of the Vuo community share nodes that they've created.


## Learning how to use a node
<abstract>Each Vuo node has a description of how it works</abstract>

Each Vuo node has documentation, or in other words, a description of how it works. You can view this description in the Node Documentation Panel (lower panel of the Node Library) after clicking on the node in the Node Library or on the composition canvas.

Besides the documentation for individual nodes, there's also documentation for node sets. At the top of the Node Documentation Panel, most nodes have a link to their node set's documentation. For example, the \vuoNode{Make 3D Object} (\vuoNodeClass{vuo.scene.make}) node has a link for \vuoNodeClass{vuo.scene}, which provides documentation that applies to nodes throughout the \vuoNodeClass{vuo.scene} node set.

Documentation both for nodes and for node sets is available in the [online node documentation](https://doc.vuo.org/VUO_VERSION/node/).

Besides documentation, many nodes also come with example compositions, which demonstrate use of the node within a composition. For nodes that have them, the example compositions are listed near the bottom of the Node Documentation Panel.


## Pro nodes
<abstract>Some nodes are only available in Vuo Pro</abstract>

\definition{Pro node}{A node that is only available in Vuo Pro}

\term{Pro node}s are only available in Vuo Pro, not in Vuo Community Edition. If a node is Pro, then the Node Documentation Panel says so at the bottom. If you try to open a composition containing Pro nodes using Vuo Community Edition, then you'll be warned that you won't be able to run the composition.

If you plan to share a composition that contains Pro nodes, keep in mind that Vuo users without Vuo Pro can't run the composition. If you want others to be able to use your composition even if they don't have Vuo Pro, consider [exporting it to an app](#exporting-an-application).

Pro nodes can be used when running compositions inside of another application (such as a VJ app), as long as Vuo Pro has been activated on the computer running the application.


## Deprecated nodes
<abstract>Updating compositions to use the latest versions of nodes</abstract>

\definition{deprecated}{Obsolete or outdated}

As Vuo grows and changes with each version, new nodes are added while some older nodes become \term{deprecated}, or obsolete. When a node is deprecated, that means there's now a better way to accomplish that node's job.

When a node becomes deprecated, compositions that contain the node will continue to work for the time being. However, the node may stop working or be removed in a future version of Vuo. In compositions that you want to continue using for the long term, it's a good idea to replace deprecated nodes.

\newInVersion{2.0}

To find all deprecated nodes in a composition, go to \menu{Edit > Find > Find…} and type *deprecated* into the search box.

To replace a deprecated node, the first thing to try is to right-click on the node and go to \menu{Change To}. If the first menu item is a node with the same title but a different node class name — for example, you've clicked on a \vuoNode{Make Image with Shadertoy} (\vuoNodeClass{vuo.image.make.shadertoy}) node and the menu lists \vuoNode{Make Image with Shadertoy} (\vuoNodeClass{vuo.image.make.shadertoy2}) — then the replacement is simple. First, select that menu item to insert the new version of the node. Second, run your composition and modify it as needed to work correctly with the new version of the node. For example, you might need to adjust the input port values because the new version handles them differently. Consult the node documentation to understand the differences.

If the \menu{Change To} menu doesn't list an obvious replacement, try searching the Node Library for a node with the same title. If you find one, add it to your composition in place of the deprecated node. As above, consult the node documentation to understand the differences between the new version and the deprecated version. Be sure to run your composition and adjust it as needed.

If you still haven't found the new node(s) to replace the deprecated node with, [check the release notes](https://vuo.org/download) or [ask the community](https://community.vuo.org).


## The built-in nodes
<abstract>An overview of some of Vuo's built-in nodes</abstract>

This section gives an overview of some of Vuo's built-in nodes. The purpose is to give you a sense of what you can accomplish with the built-in nodes and where to start. For more details, see the node and node set documentation.

### Graphics/video

Vuo comes with many different nodes for working with graphics. These can be roughly divided into 2D and 3D graphics (along with some nodes to convert between them).

For **2D designs and animations**, the \vuoNodeClass{vuo.image} and \vuoNodeClass{vuo.layer} node sets are your starting point. These let you arrange and manipulate shapes and images, and render them in a window or composite image.

For **3D models and meshes**, the \vuoNodeClass{vuo.scene} node set is your starting point. It lets you load or build 3D objects, warp them, and arrange them within a scene, which you can render in a window or image. When building 3D objects, two additional node sets are helpful: \vuoNodeClass{vuo.transform} for positioning, rotating, and scaling an object, and \vuoNodeClass{vuo.shader} for painting a pattern or material on an object.

When working with 2D or 3D animations, the \vuoNodeClass{vuo.motion} node set lets you control the **path and speed of a moving object**.

For **video**, the \vuoNodeClass{vuo.video} node set handles playing movies and receiving video from cameras. When working specifically with the cameras on a Kinect, you can use the \vuoNodeClass{vuo.kinect} node set. If you want to send and receive video between Vuo compositions and other applications, there's the \vuoNodeClass{vuo.syphon} node set.

\vuoNode{Make Quad Layer} and related nodes in the \vuoNodeClass{vuo.layer} node set support **projection mapping**.

#### Vuo Coordinates

\definition{coordinate system}{A way to represent a position in 2D or 3D using numbers}

When drawing graphics to a window or image, you need to understand the \term{coordinate system} of the area you're drawing to. For example, when you use the \vuoNode{Render Scene to Window} node to display a 3D scene in a window, typically the point in your 3D scene with coordinates (0,0,0) will be drawn at the center of the window. (If you're not familiar with the concept of 2D and 3D coordinates, see [https://simple.wikipedia.org/wiki/Cartesian_coordinate_system](https://simple.wikipedia.org/wiki/Cartesian_coordinate_system) and other references to learn more.)

\definition{Vuo Coordinates}{Vuo's specific \term{coordinate system}, where the center of the rendering area is represented by (0,0) for 2D graphics or (0,0,0) for 3D graphics}

All of the built-in nodes that work with graphics use \term{Vuo Coordinates}:

\vuoImage{0.55}{vuo-coordinates.pdf}

Typically, as illustrated above, the position (0,0) for 2D graphics or (0,0,0) for 3D graphics is at the center of the rendering area. The X-coordinate -1 is along the left edge of the rendering area, and the X-coordinate 1 is along the right edge. The rendering area's height depends on the aspect ratio of the graphics being rendered, with the Y-coordinate increasing from bottom to top. In 3D graphics, the Z-coordinate increases from back to front.

When working with 3D graphics, you can change the center and bounds of the rendering area by using a \vuoNode{Make Perspective Camera} or \vuoNode{Make Orthogonal Camera} node. For example, you can use a camera to zoom out, so that the rendering area shows a larger range of X- and Y-coordinates.

### Sound/audio

The \vuoNodeClass{vuo.audio} node set lets you work with audio input and output. You can use audio input to create music visualizations or control a composition with sound. You can use audio output to synthesize sounds. Together, audio input and output can be used to receive a live audio feed, process the audio, and play it aloud.

### User input devices

There are many built-in nodes you can use to make your compositions interactive, including:

   - \vuoNodeClass{vuo.mouse} for getting input from a mouse or trackpad
   - \vuoNodeClass{vuo.keyboard} for getting input from keys typed or pressed
   - \vuoNodeClass{vuo.hid} for getting input from a USB Human Interface Device (HID)
   - \vuoNodeClass{vuo.leap} for controlling a composition with hand and finger movements from a Leap Motion device
   - \vuoNodeClass{vuo.osc} for remotely controlling a composition via a TouchOSC interface on a phone or tablet

### Music and stage equipment

Your compositions can control and be controlled by music and stage equipment — such as keyboards, synthesizers, sequencers, and lighting — using several common protocols:

   - \vuoNodeClass{vuo.osc} for receiving OSC messages
   - \vuoNodeClass{vuo.midi} for sending and receiving MIDI events
   - \vuoNodeClass{vuo.artnet} (pro) for sending and receiving Art-Net messages

The \vuoNodeClass{vuo.bcf2000} nodes interface with the Behringer BCF2000 MIDI controller.

### Applications

Applications that send or receive messages via the OSC, MIDI, or Art-Net protocol can communicate with your composition if you use the \vuoNodeClass{vuo.osc}, \vuoNodeClass{vuo.midi}, or \vuoNodeClass{vuo.artnet} nodes.

Your composition can send video to and receive video from other applications via Syphon using the \vuoNodeClass{vuo.syphon} node set.

With the \vuoNodeClass{vuo.app} node set, your composition can launch other apps and open documents in them.

### Sensors, LEDs, and motors

The \vuoNodeClass{vuo.serial} nodes allow your composition to connect to serial devices, including programmable microcontrollers like Arduino. Via the Arduino, your composition can receive data from sensors, and send data to control LEDs and motors.

### Displays

Two node sets let you fine-tune how a composition's windows are displayed on the available screens. The \vuoNodeClass{vuo.screen} node set provides information about the available screens. The \vuoNodeClass{vuo.window} node set controls how each window is displayed, including its aspect ratio and whether it's fullscreen.

### Files

Your composition can open files on your computer's filesystem or download them from the internet using "fetch" nodes, such as \vuoNode{Fetch Image}, \vuoNode{Fetch Data}, and \vuoNode{Fetch XML Tree}.

Your composition can save files to your computer's filesystem using "save" nodes, such as \vuoNode{Save Image}, \vuoNode{Save Data}, and \vuoNode{Save Images to Movie}.

For opening, manipulating, and saving XML and JSON files, there's the \vuoNodeClass{vuo.tree} node set. And for CSV and TSV files, there's the \vuoNodeClass{vuo.table} node set.

The \vuoNodeClass{vuo.file} nodes enable your composition to interact with your computer's filesystem.

### Internet

With the \vuoNodeClass{vuo.rss} nodes, your composition can download RSS feeds.

To retrieve data from an XML or JSON web service, you can use the \vuoNodeClass{vuo.tree} nodes.


## Adding nodes to the canvas by dropping files
<abstract>Drag and drop media files onto the canvas</abstract>

For many types of files, dragging and dropping the file onto the canvas will create a node with that file as input. (If more than one node matches the file type, you'll be presented with a menu to choose which node.)

| Type of file | Node created |
|--------------|--------------|
| image        | \vuoNode{Fetch Image} |
| audio        | \vuoNode{Play Audio File} |
| video        | \vuoNode{Play Movie} or \vuoNode{Decode Movie Image} |
| 3D model     | \vuoNode{Fetch Scene} |
| projection mesh | \vuoNode{Warp Image with Projection Mesh} |
| plain text   | \vuoNode{Fetch Data} |
| JSON         | \vuoNode{Fetch JSON Tree} |
| XML          | \vuoNode{Fetch XML Tree} |
| CSV or TSV   | \vuoNode{Fetch Table} |
| RSS or RDF   | \vuoNode{Fetch RSS Items} |
| ICC profile  | \vuoNode{Fetch Data} |
| application  | \vuoNode{Launch App} |
| folder       | \vuoNode{List Files} |

By default, the node's \vuoPort{URL} input port value will be filled in with the file's relative path. To get an absolute path instead, hold down the option key when dropping the file onto the canvas.


## Creating a node
<abstract>Developing custom nodes</abstract>

You can expand the things that Vuo can do by adding nodes to your Node Library. There are several ways to create your own nodes:

   - By turning a group of nodes and cables into a single node. See [Using subcompositions inside of other compositions](#using-subcompositions-inside-of-other-compositions).
   - By writing GLSL code within Vuo. See [Turning graphics shaders into nodes](#turning-graphics-shaders-into-nodes).
   - By writing C/C++/Objective-C code in a text editor or IDE. See [Developing node classes and types for Vuo](https://api.vuo.org/VUO_VERSION/group___developing_node_classes_types.html).


## Installing a node
<abstract>Adding community nodes to your Node Library</abstract>

You can download nodes created by other people and add them to your Node Library. These include nodes found in the [Node Gallery](https://vuo.org/nodes), subcompositions found in the [Composition Gallery](https://vuo.org/composition), and fragment shaders in [Interactive Shader Format (ISF)](https://www.interactiveshaderformat.com/).

### Installing a node the quick way

\changedInVersion{2.0}{You no longer have to relaunch Vuo after installing nodes.}

If the node to install is a `.vuonode` file, you can just double-click on the file to install it. The node gets installed in the User Library folder (explained in the next section). You can begin using the node right away, without having to relaunch Vuo.

### Making a node available to all compositions

\definition{User Library folder}{A folder containing nodes that are available to any composition opened by the user currently logged into the computer}
\definition{System Library folder}{A folder containing nodes that are available to any composition opened by any user logged into the computer}

Depending on who should have access to the node — which compositions, and which user accounts on the computer — there are different places to install the node.

\vuoImage{0.37}{composition-libraries.pdf}

If the node is one that you expect to use in many compositions, you can install it in the \term{User Library folder} or the \term{System Library folder}. To access these folders, go to:

   - \menu{Tools > Open User Library in Finder}
      - Or in Finder: Hold down the Option key and select the \menu{Go > Library} menu option. From there, go to \directory{Library/Application Support/Vuo/Modules}.
   - \menu{Tools > Open System Library in Finder}
      - Or in Finder: In the top-level folder on your hard drive, go to \directory{Library/Application Support/Vuo/Modules}.

You'll typically want to choose the User Library folder, since yours will be the only user account on your computer that needs access to the node. Use the System Library folder only if you have administrative access and you want all users on the computer to have access to the node.

To install the node, just place the node file in the User Library or System Library folder. If Vuo is running, it will automatically detect the file, and the node will appear in the Node Library momentarily. Otherwise, the node will appear in the Node Library the next time you launch Vuo.

### Making a node available to one or a few compositions

\definition{Composition-Local Library}{A folder containing nodes that are available only to compositions located next to the folder}

\newInVersion{2.0}

While some nodes are generally useful, others are more specialized. They may only make sense within the context of a certain composition. Thus, you may not want them to appear in your Node Library when you're working on unrelated compositions.

You can make a node available only to selected compositions by installing it in a \term{Composition-Local Library}. For example, let's say you have a composition called `Reptiles.vuo` saved to your Desktop. You have a subcomposition called `me.crocodile.vuo` and a node called `me.tortoise.vuonode` that you need only for `Reptiles.vuo`. You can create a folder called \directory{Modules} on your Desktop and place `me.crocodile.vuo` and `me.tortoise.vuonode` in that folder.

A Composition-Local Library is a folder called \directory{Modules} located in the same folder as a composition. When you have that composition open, the nodes in the Composition-Local Library appear in the Node Library.

If there's more than one composition in the same folder as \directory{Modules}, all of those compositions can "see" and make use of the nodes in that Composition-Local Library.

A subcomposition within a Composition-Local Library may contain other nodes that are installed in the same Composition-Local Library. It may also contain nodes that are installed in the User Library or System Library folder.

If you install a subcomposition in a Composition-Local Library and later decide that you want to make the node available to all compositions, you can open the subcomposition and go to \menu{File > Move to User Library}.

### Uninstalling a node

To uninstall a node, delete or move the node file out of the Library folder in which it's installed.

To find out where the node is installed, right-click on it in the Node Library and go to \menu{Show in Finder}.

Be aware that once you've uninstalled a node, compositions that contain the node will no longer work.


# Using subcompositions inside of other compositions
<abstract>How and why to create subcompositions</abstract>

\definition{subcomposition}{A composition that can be used as a node inside of other compositions}

If you find yourself copying and pasting the same group of nodes and cables into many compositions, you may want to turn those nodes and cables into a \term{subcomposition}. A subcomposition is a composition that can be used as a node inside of other compositions. A subcomposition saves you the effort of having to recreate the same nodes and cables over and over. They're packaged neatly inside a node, which you can drag from the Node Library onto your canvas just like any other node.

Let's walk through an example. Suppose you often draw hemispheres (half spheres) in your 3D compositions, and it would be convenient to have a \vuoNode{Make Hemisphere} node in your Node Library. The first step is to identify the nodes and cables that you want to package into a subcomposition.

\vuoScreenshot{DisplayRotatingHemispheres-noSubcomps}

The composition above renders two rotating hemispheres to a window. (The \vuoNode{Trim 3D Object} node cuts off half of the sphere. The \vuoNode{Show Back of 3D Object} node makes the inside of the sphere visible.)

In other compositions, you may want to create any number of hemispheres. The hemispheres could have different rotations, positions, sizes, and colors. They could be rendered to a window or an image. So, for the subcomposition, let's choose a piece of the composition that's flexible enough to be used in all of these scenarios: the nodes and cables tinted magenta.

\newInVersion{2.0}

To turn these nodes and cables into a subcomposition, select them, then right-click on them and go to \menu{Package as Subcomposition}.

\vuoScreenshot{DisplayRotatingHemispheres-package}

This extracts the selected part of the composition into a new window, where you're asked to pick a name for the subcomposition.

\vuoScreenshot{me.makeHemisphere-title}

Having named the subcomposition, you now have two windows: one with the subcomposition and one with the original composition, in which the selected part has been replaced with a subcomposition node.

\vuoScreenshot{me.makeHemisphere}

\vuoScreenshot{DisplayRotatingHemispheres-oneSubcomp}

In the original composition, the nodes and cables outside of the selected part (which was packaged into a subcomposition) connected to the selected part at three points of contact:

   - the \vuoPort{Transform} input port of \vuoNode{Transform 3D Object},
   - the \vuoPort{Material} input port of \vuoNode{Make Sphere}, and
   - the \vuoPort{Transformed Object} output port of \vuoNode{Transform 3D Object}.

When the selected part was packaged into a subcomposition, these three points of contact became published input and output ports within the \vuoNode{Make Hemisphere} subcomposition. Correspondingly, they became input and output ports on the \vuoNode{Make Hemisphere} node.

Now that you have a \vuoNode{Make Hemisphere} node available, you can search for it in the Node Library and add more instances of it to your composition.

\vuoScreenshot{DisplayRotatingHemispheres-twoSubcomps}

## Making a subcomposition available to other compositions
<abstract>Which other compositions can access a subcomposition</abstract>

\menu{Package as Subcomposition} installs the subcomposition in a Composition-Local Library. This makes the subcomposition appear in the Node Library only when the composition it came from (or another composition in the same folder) is open. If you want the subcomposition to appear in the Node Library for all compositions, click on the subcomposition window and go to \menu{File > Move to User Library}.

For an explanation of Composition-Local and User Library folders, see [Installing a node](#installing-a-node).

## Reasons to use subcompositions
<abstract>Reuse, organize, share</abstract>

The \vuoNode{Make Hemisphere} subcomposition illustrated one motivation for using subcompositions: to avoid recreating the same composition pieces over and over again. A subcomposition enables you to assemble a composition piece once and reuse it many times. If you notice a problem with the subcomposition or want to improve it, you only have to make the change in one place to have it apply everywhere the subcomposition is used.

Another reason you may want to use subcompositions is to better organize large compositions to make them more readable. You can replace a complex network of nodes and cables with a subcomposition that has a descriptive title and a clearly defined set of inputs and outputs.

A third reason for using subcompositions is to share your work with others in a modular format. When you create a composition piece that other people might like to use inside of their compositions, you can package it as a subcomposition that others can install in their Node Libraries.

## Creating a subcomposition
<abstract>Installing subcompositions in Composition-Local and User Library folders via menu items</abstract>

In the example above, we created the \vuoNode{Make Hemisphere} subcomposition by selecting nodes and cables within a composition, right-clicking on them, and going to \menu{Package as Subcomposition}. This installed the subcomposition in a Composition-Local Library.

If\newInVersion{2.0} you want to create an empty subcomposition in a Composition-Local Library, you can right-click on the canvas and go to \menu{Insert Subcomposition}.

If instead you want to create a subcomposition in the User Library folder, you can open a new or existing composition and go to \menu{File > Save to User Library}.

### Naming a subcomposition

When you turn an already-saved composition into a node, the node's title derives from the composition's file name. A composition file called \code{Scribble.vuo} or \code{scribble.vuo} would be turned into a node titled \vuoNode{Scribble}. A composition file called \code{Solve Anagram.vuo} or \code{SolveAnagram.vuo} would be turned into a node titled \vuoNode{Solve Anagram}.

If you haven't yet saved the composition file, Vuo prompts you to enter a node title.

The node's class name is your vuo.org account name followed by a period followed by a lower-camel-case version of the node title — for example, \vuoNodeClass{me.scribble} or \vuoNodeClass{me.solveAnagram}.  In the \menu{File > Save to User Library} dialog, you can customize the prefix — for example, you could group your subcompositions into categories such as \vuoNodeClass{me.interaction.scribble} or \vuoNodeClass{me.algorithm.solveAnagram}.

After\newInVersion{2.0} turning a subcomposition into a node, if you want to change the node's title, open the subcomposition and go to \menu{Edit > Composition Information…}.

If you want to change the node's class name, rename the installed subcomposition file. Do this by right-clicking on the subcomposition node in the Node Library and choosing the menu item \menu{Show in Finder}, finding your installed subcomposition in that folder (for example, \code{me.scribble.vuo}), and renaming the file. Be careful renaming a subcomposition, because any compositions that refer to the subcomposition by its old name will have an error until you substitute in the new version of the subcomposition.

## Editing a subcomposition
<abstract>When you save changes made to the subcomposition, the changes apply everywhere the subcomposition is used</abstract>

\vuoImage{0.8}{MakeHemisphere-node.pdf}

A subcomposition node has an icon in its top-right corner, indicating that there's a composition inside that you can edit. You can open that composition by double-clicking on the subcomposition node on the canvas, or by right-clicking on the subcomposition node on the canvas or in the Node Library and choosing \menu{Edit Composition…}.

When you save changes made to the subcomposition, the changes apply everywhere the subcomposition is used. If the subcomposition is installed in the User Library or System Library folder, this means every instance of the subcomposition node in every composition that uses it.

If the subcomposition is installed in a Composition-Local Library, changes likewise affect every instance of the subcomposition node in every composition that uses it. However, the compositions are limited to those in the same folder as the Composition-Local Library. It's possible to have different variants of a subcomposition (same node class name, different contents) installed in multiple Composition-Local Libraries — in which case, changes to one variant of the subcomposition don't affect compositions that use a different variant.

## Watching events and data inside a subcomposition
<abstract>Port popovers and Show Events mode in a subcomposition window</abstract>

\newInVersion{2.0}

When you open a subcomposition via a node on the canvas — by double-clicking on the node or by right-clicking and choosing \menu{Edit Composition…} — you can monitor the data and events flowing through the subcomposition just as you would in a regular composition — by opening port popovers and enabling Show Events.

For example, in the composition below, if you double-clicked on the magenta (upper) \vuoNode{Make Hemisphere} node to open the subcomposition, then opened a port popover within the subcomposition, you'd see the events and data that are flowing through the magenta instance of the subcomposition.

\vuoScreenshot{DisplayRotatingHemispheres-twoSubcomps}

If instead you wanted to see the events and data that are flowing through the tangerine (lower) instance of \vuoNode{Make Hemisphere}, you would double-click on that node.

Be aware that if you open a subcomposition via the Node Library, even if a composition that contains the subcomposition is running, you won't see any data or events flowing through the subcomposition. You need to open it via a node on the canvas instead.

## How events travel through a subcomposition
<abstract>Events into and out of a subcomposition's published ports</abstract>

Contents:

   - [Events into a subcomposition](#events-into-a-subcomposition)
   - [Events out of a subcomposition](#events-out-of-a-subcomposition)
   - [Constant input port values](#constant-input-port-values)

### Events into a subcomposition

\changedInVersion{2.0}{An event now only enters a subcomposition through the published input ports that it hit, not all published input ports.}

When an event hits an input port of a subcomposition node, it travels into the subcomposition through the corresponding published input port.

When an event hits multiple input ports of the subcomposition node, it travels in through all of the corresponding published input ports simultaneously.

To illustrate, here's a composition that uses a subcomposition node called \vuoNode{Connect Recent Points} to draw a series of connected line segments behind the mouse cursor as it moves. Below that is the \vuoNode{Connect Recent Points} subcomposition.

\vuoScreenshot{DrawTailBehindMouse-fixedLength}

\vuoScreenshot{me.connectRecentPoints}

When an event hits the \vuoPort{Add Point} input port of the \vuoNode{Connect Recent Points} node (in the first composition above), it travels into the subcomposition (second composition above) through the \vuoPort{AddPoint} published input port. The event hits the \vuoNode{Enqueue} node and travels onward through the subcomposition.

You might be wondering about the \vuoPort{Max Recent Points} input port, which has no incoming events. We'll talk more about ports with constant values in a moment, but for now just know that the constant data does enter the subcomposition through the \vuoPort{MaxRecentPoints} published input port and reach the \vuoNode{Enqueue} node.

Here's a modification of the first composition above that allows the user to toggle between a short tail and a long tail by pressing any key.

\vuoScreenshot{DrawTailBehindMouse-variableLength}

Now events come in through the \vuoPort{MaxRecentPoints} published input port whenever the user presses a key and the \vuoPort{AddPoint} published input port whenever the user moves the mouse.

### Events out of a subcomposition

\changedInVersion{2.0}{An event now only exits a subcomposition through the published output ports that it hit, not all published output ports.}

If an event reaches a published output port of a subcomposition, it travels out of the corresponding output port of the subcomposition node.

If an event into a subcomposition node reaches multiple published output ports of the subcomposition, it travels out of all of the corresponding output ports of the subcomposition node simultaneously. For example, in the subcomposition below, even though the \vuoNode{Calculate} nodes can execute concurrently and may not output their values at exactly the same time, the \vuoNode{Convert Cartesian To Polar} subcomposition node always outputs the event from its \vuoPort{R} and \vuoPort{Theta} ports simultaneously.

\vuoScreenshot{me.convertCartesianToPolar}

If an event that comes in through a subcomposition's published input ports doesn't reach any of the subcomposition's published output ports (because of wall or door ports within the subcomposition), then the event doesn't come of out any of the subcomposition node's output ports. The subcomposition node blocks the event.

A subcomposition can fire events, as demonstrated below. The \vuoNode{Fire At Tempo} subcomposition node is set to fire at a rate of 120 beats per minute.

\vuoScreenshot{Metronome}

\vuoScreenshot{FireAtTempo}

\changedInVersion{2.0}{Events from triggers within a subcomposition don't exit the subcomposition if they overlap with events from published input ports.}

If events fired from within the subcomposition can overlap with events from the published input ports, only the events from the published input ports will exit through the published output ports. The subcomposition node will transmit events but not fire events.

The subcomposition above, \vuoNodeClass{me.fireAtTempo}, *does* fire events from its published output port. That's because there's no overlap between the events coming in through the \vuoPort{BeatsPerMinute} published input port (which are blocked at the \vuoNode{Fire Periodically} node's input port) and the events fired from the \vuoNode{Fire Periodically} node's output port.

The subcomposition below *does not* fire events from its published output port. That's because the event fired from the \vuoNode{Fire on Start} node travels along the same path as the events coming in from the published input port (nodes tinted magenta). The event fired from \vuoNode{Fire on Start} travels within the subcomposition but is blocked from exiting the subcomposition. Meanwhile, events that come in through the published input port do exit through the published output port.

\vuoScreenshot{DisplayLogo}

\vuoScreenshot{me.makeFancyLogo}

### Constant input port values

If an input port on a subcomposition node has a constant value with no cables going into it, the constant value travels into the subcomposition through the corresponding published input port when the composition starts and whenever you edit the constant value.

The data travels from the published input port to any input ports that are directly connected to it by a cable. This is a rare case in which data can travel without an event. The data reaches the input ports on nodes but does not cause the nodes to execute.

In the example below, the \vuoNode{Generate Checkerboard Image} subcomposition's \vuoPort{width} and \vuoPort{height} input ports are set to the constant values 1920 and 1080. The subcomposition outputs a 1920x1080 image.

\vuoScreenshot{RenderCheckerboardImage}

\vuoScreenshot{me.generateCheckerboardImage}

It's important to realize that the data travels only through the cable from the published input port to the next node, no farther. With the below variation on \vuoNode{Generate Checkerboard Image}, the subcomposition no longer outputs an image of size specified by \vuoPort{width} and \vuoPort{height}. Why? Because the constant values 1920 and 1080 only flow as far as the \vuoNode{Multiply} node's input ports. They don't cause the \vuoNode{Multiply} node to execute and pass its data along to the \vuoNode{Make Checkerboard Image} node.

\vuoScreenshot{me.generateCheckerboardImageHalfSize-constantsBlocked}

To fix the composition above, you could add an event cable from the \vuoPort{time} published input port to each of the \vuoNode{Multiply} nodes. This would ensure that the \vuoNode{Multiply} nodes provide the halved width and height to \vuoNode{Make Checkerboard Image} whenever \vuoNode{Make Checkerboard Image} needs them, even if \vuoPort{width} and \vuoPort{height} have constant values.

\vuoScreenshot{me.generateCheckerboardImageHalfSize-constantsFlow}

As long as the published input port connects directly to the node's input port, you can use a constant value to control a node that fires events. In the example below, editing the subcomposition node's \vuoPort{Seconds} input port would affect the firing rate of the \vuoNode{Fire Periodically} node inside of it.

\vuoScreenshot{me.tick}


# Making compositions fit a mold with protocols
<abstract>Image Filters, Image Generators, and Image Transitions</abstract>

\definition{protocol}{A predetermined set of published ports with certain names and data types}
\definition{Image Filter}{A \term{protocol} for altering an image}
\definition{Image Generator}{A \term{protocol} for creating an image}
\definition{Image Transition}{A \term{protocol} for transitioning from one image to another}

\noteTextProgrammers{A protocol in Vuo is like an \code{interface} in object-oriented programming.}

You may have noticed that a lot of Vuo's nodes fall into groups where the nodes in the group are, in some sense, interchangeable. For example, what are some nodes that can fill in the blank in the composition below?

\vuoCompositionImage{FilterImage-blank}

There are numerous possibilities: \vuoNode{Adjust Image Colors}, \vuoNode{Outline Image}, \vuoNode{Make Cartoon Image}, and \vuoNode{Reduce Haze}, just to name a few. Any node that inputs an image and outputs a modified version of that image will fit.

\vuoCompositionImage{FilterImage-OutlineImage}

The idea of a \term{protocol} is to give a name to the kinds of nodes or compositions that can fill in a blank. A protocol defines a list of input and output ports, with certain names and data types.

Protocols are something you need to know about when exporting a composition as a movie, screen saver, or plugin ([Exporting compositions](#exporting-compositions)) or using a composition in a VJ application.

You can find compositions exemplifying each protocol under \menu{File > Open Example > Image Generator}, \menu{Image Filter}, and \menu{Image Transition}.

## Image Filter protocol

The \term{Image Filter} protocol is for compositions that alter an image (or stream of images). For example, an Image Filter could add a special distortion effect to a video clip.

<?dbhtml stop-chunking?>

### Published input ports
<!-- Keep these descriptions in sync with VuoPublishedPortSidebar::appendPublishedPortToList. -->

| Name       | Data type | Required? | Description              |
| ---------- | --------- | --------- | ------------------------ |
| \vuoPort{image} | Image | Required | The original image. |
| \vuoPort{time} | Real | Required | A number that changes over time, used to control animations or other changing effects. |
| \vuoPort{duration} | Real | Optional | For FxPlug: The length, in seconds, of the clip. |
| \vuoPort{framerate} | Real | Optional | For FxPlug: The framerate of the project, in frames per second. |
| \vuoPort{frameNumber} | Integer | Optional | For FxPlug: The number of frames since the beginning of the clip, starting at 0. |
| \vuoPort{quality} | Real | Optional | For FxPlug: The rendering quality or level of detail. |

\vuoPort{time} and \vuoPort{quality} are further explained later in this section.

### Published output ports
<!-- Keep these descriptions in sync with VuoPublishedPortSidebar::appendPublishedPortToList. -->

| Name       | Data type | Description              |
| ---------- | --------- | ------------------------ |
| \vuoPort{outputImage} | Image | The altered image. |

## Image Generator protocol
<abstract>Compositions that create an image</abstract>

The \term{Image Generator} protocol is for compositions that create an image (or stream of images). For example, an Image Generator could create a special animation for the opening sequence of a video.

<?dbhtml stop-chunking?>

### Published input ports
<!-- Keep these descriptions in sync with VuoPublishedPortSidebar::appendPublishedPortToList. -->

| Name       | Data type | Required? | Description              |
| ---------- | --------- | --------- | ------------------------ |
| \vuoPort{width} | Integer | Required | The requested width of the image, in pixels. |
| \vuoPort{height} | Integer | Required | The requested height of the image, in pixels. |
| \vuoPort{time} | Real | Required | A number that changes over time, used to control animations or other changing effects. |
| \vuoPort{offlineRender} | Boolean | Optional | For movie export: \emph{true} if the composition is being exported to a movie and \emph{false} otherwise. |
| \vuoPort{motionBlur} | Integer | Optional | For movie export: The number of frames rendered per output frame. 1 means motion blur is disabled; 2, 4, 8, 16, 32, or 64 means motion blur is enabled. |
| \vuoPort{duration} | Real | Optional | For movie export and FxPlug: The length, in seconds, of the movie/clip. |
| \vuoPort{framerate} | Real | Optional | For movie export and FxPlug: The framerate of the movie/project, in frames per second. |
| \vuoPort{frameNumber} | Integer | Optional | For movie export and FxPlug: The number of frames since the beginning of the movie/clip, starting at 0. |
| \vuoPort{quality} | Real | Optional | For FxPlug: The rendering quality or level of detail. |
| \vuoPort{screen} | Screen | Optional | For screen savers: Which display the screen saver is running on. (macOS runs a separate instance of the composition on each display.) |
| \vuoPort{preview} | Boolean | Optional | For screen savers: \emph{true} when the screen saver is running in the System Settings preview thumbnail. |

\vuoPort{time} and \vuoPort{quality} are further explained later in this section.

### Published output ports
<!-- Keep these descriptions in sync with VuoPublishedPortSidebar::appendPublishedPortToList. -->

| Name       | Data type | Description              |
| ---------- | --------- | ------------------------ |
| \vuoPort{outputImage} | Image | The created image. Its width and height should match the \vuoPort{width} and \vuoPort{height} published input ports. |

## Image Transition protocol
<abstract>Compositions that transition from one image to another</abstract>

\newInVersion{2.0}

The \term{Image Transition} protocol is for compositions that transition from one image (or stream of images) to another. For example, an Image Transition could crossfade from one scene in a movie to the next scene.

<?dbhtml stop-chunking?>

### Published input ports
<!-- Keep these descriptions in sync with VuoPublishedPortSidebar::appendPublishedPortToList. -->

| Name       | Data type | Required? | Description              |
| ---------- | --------- | --------- | ------------------------ |
| \vuoPort{startImage} | Image | Required | The image to transition from. |
| \vuoPort{endImage} | Image | Required | The image to transition to. |
| \vuoPort{progress} | Real | Required | A number from 0 to 1 for how far the transition has progressed. At 0, the transition is at the beginning, with only \vuoPort{startImage} showing. At 0.5, the transition is halfway through. At 1, the transition is complete, with only \vuoPort{endImage} showing. When previewing the composition in Vuo, the mouse position left to right controls \vuoPort{progress}. |
| \vuoPort{time} | Real | Required | A number that changes over time, used to control animations or other changing effects. \vuoPort{time} is independent of \vuoPort{progress}. |
| \vuoPort{duration} | Real | Optional | For FxPlug: The length, in seconds, of the transition. |
| \vuoPort{framerate} | Real | Optional | For FxPlug: The framerate of the project, in frames per second. |
| \vuoPort{frameNumber} | Integer | Optional | For FxPlug: The number of frames since the beginning of the transition, starting at 0. |
| \vuoPort{quality} | Real | Optional | For FxPlug: The rendering quality or level of detail. |

\vuoPort{time} and \vuoPort{quality} are further explained later in this section.

### Published output ports
<!-- Keep these descriptions in sync with VuoPublishedPortSidebar::appendPublishedPortToList. -->

| Name       | Data type | Description              |
| ---------- | --------- | ------------------------ |
| \vuoPort{outputImage} | Image | The resulting image. |

## Time
<abstract>The time published input port</abstract>

The \vuoPort{time} published input port, which appears in multiple protocols, has a slightly different meaning depending on the context.

   - In most situations, including when previewing a protocol-compliant composition in Vuo, \vuoPort{time} is the number of seconds since the composition started running.
   - When exporting a movie, \vuoPort{time} is the number of seconds from the start of the movie to the beginning of the current frame.
   - In an exported FxPlug plugin, \vuoPort{time} is the number of seconds since the start of the clip (for generators and effects) or transition.

## Quality
<abstract>The quality published input port</abstract>

Another published input port common to multiple protocols is \vuoPort{quality}. In exported FxPlug plugins, this port's value is the requested rendering quality or level of detail, from 0 (low quality / faster performance) to 1 (high quality / slower performance).

In Final Cut Pro X, \vuoPort{quality} is always 0.5.

In Motion, the \menu{Render > Normal} and \menu{Draft} settings correspond to value 0.5. The \menu{Render > Best} setting corresponds to value 1.0. More information about render quality is in the [Motion documentation](https://support.apple.com/guide/motion/custom-canvas-view-options-motnad41607e/mac#motn6638ab1d).

## Creating a protocol composition
<abstract>Creating compositions with protocol published ports</abstract>

\changedInVersion{2.0}{Added the Export submenu.}

To create a composition that conforms to a protocol, choose one of the options under \menu{File > New Composition from Template > Protocol} or \menu{Export}. If you plan to export the composition (to create a movie or screen saver, for example), then your best option is to pick from the \menu{Export} submenu. These menu items automatically add the optional protocol published ports relevant to the chosen export type.

If you've already started working on a composition and want to make it conform to a protocol, go to \menu{Edit > Protocols} and choose a protocol.

## Editing a protocol composition
<abstract>Adding optional protocol published ports to a composition</abstract>

If you didn't get the optional protocol published ports automatically by choosing a menu item under \menu{File > New Composition from Template > Export}, you can still add them later. You add them in the same way that you would add a non-protocol published port. Be sure to set the published port's name and data type exactly as they appear in this manual. Names are case-sensitive.

## Running a protocol composition
<abstract>Previewing a composition in Vuo and understanding how it will run in other contexts</abstract>

When you run an Image Generator, Image Filter, or Image Transition composition with the Run button, Vuo feeds data and events into the  published input ports and displays the published output image in a window. This makes it easy to preview how the composition will look when run inside of an exported product or another application.

You can change the images the Vuo feeds into protocol published input ports. For an Image Filter composition, drop an image file onto the running composition's window to change the image being filtered. For an Image Transition composition, drop an image file onto the left or right half of the window to change the start or end image, respectively.

## How events travel through a protocol composition
<abstract>Events into and out of a protocol composition's published ports</abstract>

\changedInVersion{2.0}{You no longer need to block unnecessary published input events with Allow Changes nodes.}

Whether you're running a protocol-compliant composition while exporting a movie, within an exported product such as a screensaver, or inside of another application, the same basic rules apply for how data and events enter through the published input ports:

   - A data-and-event published input port transmits its data and event whenever the data changes.
      - The first event enters through every published input port.
      - Subsequent events enter only through published input ports whose data has changed, generally speaking.
      - However, there are some exceptions. Depending on which data type the port has and who is running the composition (for example, Vuo or another application), the published input port may transmit every event.
   - An event-only published input port never transmits an event.
   - The next event comes in through the published input ports only after the composition has finished processing the current event and any events spun off from it.
      - Events spun off are those output by \vuoNode{Spin Off Event}, \vuoNode{Spin Off Events}, \vuoNode{Spin Off Value}, \vuoNode{Build List}, and \vuoNode{Process List}.
      - The composition has finished processing an event when the event either has reached the published output ports or has been blocked within the composition.

\changedInVersion{2.0}{You no longer need to ensure that exactly one event reaches the published output ports for each event from the published input ports.}

Image Generator, Image Filter, and Image Transition compositions are typically expected to do their jobs at a steady rate — receiving events and providing output images at evenly spaced time intervals. Triggers within a composition may fire additional events, but those events don't affect the host (movie exporter, exported product, or other application) running the composition. The composition continues to provide output images at the same rate that it receives events.


# Exporting compositions
<abstract>Capturing an image of a composition</abstract>

You may want to export a Vuo composition…

   - to create a finished product, such as a video, image, or app,
   - to create a plugin for another application, such as video editing or VJ software,
   - to share your work with people who don't have Vuo installed.

This section covers the many ways that you can export a Vuo composition to another format.

## Exporting an image

If you want to capture an image of a composition, you can either take a screenshot (open the Preview app and go to \menu{File > Take Screenshot}) or use the \vuoNode{Save Image} node (see the node's description for details).

## Exporting a movie
<abstract>Recording or exporting a movie</abstract>

Vuo offers several ways to create a movie from a composition:

   - For an easy way to record the graphics displayed in a window, in the composition's menu go to \menu{File > Start Recording}.
   - For the highest-quality rendering, make your composition use the [Image Generator protocol](#making-compositions-fit-a-mold-with-protocols), and in Vuo go to \menu{File > Export > Movie…}.
   - To control the movie export from within your composition, use the \vuoNode{Save Images to Movie} node or the \vuoNode{Save Frames to Movie} node. (See each node's description for details.)
   - To control the movie export from the command line, use the `vuo-export` command-line tool. (See [Exporting a composition on the command line](#exporting-a-composition-on-the-command-line) for details.)

### Recording the graphics in a window

To record a movie:

   - Run a composition that shows at least one window.
   - If your composition has more than one window, click on the one you want to record to make it the active (frontmost) window.
   - Go to \menu{File > Start Recording}. This immediately starts recording the movie.
   - Let the composition run for as long as you want to record the movie. You can interact with the composition while it's recording.
   - Go to \menu{File > Stop Recording…}. This immediately stops recording the movie and presents a save dialog.
   - In the save dialog, choose the file where you want to save your movie.

When you start recording, the graphics showing in the window at that moment are added as a frame in the movie. After that, each time the window being recorded renders some graphics — in other words, each time the \vuoNode{Render Image to Window}, \vuoNode{Render Layers to Window}, or \vuoNode{Render Scene to Window} node receives an event — a frame is added to the movie. If your composition is rendering about 60 frames per second, then your movie will play back at about 60 frames per second. If your composition renders once, then waits 10 seconds, then renders again, your movie will do the same — show the first frame for 10 seconds, then show the second frame.

The dimensions of the rendered movie match the dimensions of the window's graphics area at the moment when you start recording. If you resize the window while the recording is in progress, then the recorded images will be scaled to the movie's dimensions.

If your composition has multiple windows, then the active (frontmost) window at the time when you went to \menu{File > Start Recording} will be the one recorded. Only the content displayed within the window's graphics area — not the window's title bar, not the cursor, and not any audio — will be recorded in the movie.

Although recording from a composition window is an easy way to create a movie, and allows you to interact with the composition while the recording is being made, it does limit the quality of the movie. Recording a movie in real time means that your computer has to do extra processing, beyond just running the composition. Depending on how powerful your computer is, this may slow the composition down or make it render choppily, and do the same to the recorded movie.

The most reliable way to avoid slowness or choppiness is to export a movie from an Image Generator composition, as described in the next section. But if you do want to record from a composition window, here are some ways to improve the quality of your recording:

   - Avoid doing other processor-intensive things on your computer (such as running other compositions) while the recording is in progress.
   - Limit the size of the window that you record. (Larger windows require more processing power.)
   - Avoid resizing the window during a recording. (Scaling the movie frames after the window has been resized requires more processing power.)

### Exporting a movie from an Image Generator composition

Another way to create a movie from a composition is with \menu{File > Export > Movie…}. Instead of recording a composition in real time, this option runs the composition invisibly and takes as long (or short) as needed to render each movie frame. The resulting movie has a precise frame rate and no dropped frames. You can choose the start and end time, frame rate, and dimensions. Optionally, you can add antialiasing and motion blur (if you have Vuo Pro).

To export a movie:

   - Go to \menu{File > New Composition from Template > Export > Movie}. This creates a composition that conforms to the [Image Generator protocol](#making-compositions-fit-a-mold-with-protocols).
   - Add nodes to the composition to make it output a stream of images.
   - Go to \menu{File > Export > Movie…}.
   - In the dialog that appears, choose the movie file to output to and the other settings for your movie.
   - Click the Export button.

## Exporting a screen saver
<abstract>Creating a macOS screen saver</abstract>

\newInVersion{2.0}

You can turn your Vuo compositions into screen savers that will run on macOS Sierra (10.12) and later.

   - In Vuo, go to \menu{File > New Composition from Template > Export > Screen Saver}. This creates a composition that conforms to the [Image Generator protocol](#making-compositions-fit-a-mold-with-protocols).
   - Add nodes to the composition to make it output a stream of images.
   - Go to \menu{File > Export > Mac Screen Saver}.
   - When the export is complete, relaunch System Settings.
   - In System Settings, go to \menu{Screen Saver} and find your screen saver.

### Sharing screen savers

You can share the screen savers you've created in Vuo with other people, even if they don't have Vuo. To find a screen saver that you've exported:

   - In Finder, hold down \keys{⌥} and go to \menu{Go > Library}.
   - In that folder, navigate to \directory{Screen Savers}.
   - Locate the screen saver (a `.saver` file).

When you send the screen saver to someone else, here's how they can install it:

   - Right-click on the `.saver` file and choose Open.
   - In the dialog that warns that the file is from an unidentified developer, click Open.
   - In the dialog that asks if you want to install the screen saver, click Install.

Alternatively, the person installing the screen saver can navigate to the \directory{Screen Savers} folder as above and drop the `.saver` file in there.

## Exporting an FxPlug plugin
<abstract>Creating plugins for Final Cut Pro X and Motion</abstract>

\newInVersion{2.0}

You can turn your Vuo compositions into custom effects, transitions, and generators for Final Cut Pro X and Motion.

\changedInVersion{2.4}{Vuo now exports FxPlug version 4 plugins.  These plugins work on both X86-64 and Apple Silicon (M1/ARM64), and require Motion or Final Cut Pro version 10.5 or later.}

### Video effects

   - In Vuo, go to \menu{File > New Composition from Template > Export > FxPlug > Effect}. This creates a composition that conforms to the [Image Filter protocol](#making-compositions-fit-a-mold-with-protocols).
   - Add nodes to the composition to make it alter the input image and output the result.
   - Go to \menu{File > Export > FxPlug}.
   - When the export is complete, relaunch Final Cut Pro.
   - In Final Cut Pro, find the plugin in the Effects Browser under \menu{Video > Vuo}.

### Transitions

   - In Vuo, go to \menu{File > New Composition from Template > Export > FxPlug > Transition}. This creates a composition that conforms to the [Image Transition protocol](#making-compositions-fit-a-mold-with-protocols).
   - Add nodes to the composition to make it combine the input images and output the result.
   - Go to \menu{File > Export > FxPlug}.
   - When the export is complete, relaunch Final Cut Pro.
   - In Final Cut Pro, find the plugin in the Transitions Browser under \menu{Vuo}.

### Generators

   - In Vuo, go to \menu{File > New Composition from Template > Export > FxPlug > Generator}. This creates a composition that conforms to the [Image Generator protocol](#making-compositions-fit-a-mold-with-protocols).
   - Add nodes to the composition to make it output a stream of images.
   - Go to \menu{File > Export > FxPlug}.
   - When the export is complete, relaunch Final Cut Pro.
   - In Final Cut Pro, find the plugin in the Titles and Generators sidebar under \menu{Vuo}.

### Category and name

By default, plugins exported from Vuo are installed in Final Cut Pro under the Vuo category. To choose a different category, before exporting go to \menu{Edit > Composition Information…}, click on the Exporting tab, and enter an FxPlug Group.

In \menu{Edit > Composition Information…}, under the General tab, you can change the name of the plugin displayed in Final Cut Pro.

### Parameters

When creating a composition to be exported as an FxPlug, the composition will have the published ports required by the protocol. It may also include some of the optional published ports for FxPlug listed in [Making compositions fit a mold with protocols](#making-compositions-fit-a-mold-with-protocols).

You can add non-protocol published input ports as well. These appear in the Inspector panel in Final Cut Pro.

Non-protocol published input ports with the following data types are controllable in Final Cut Pro or Motion:

| Data type         | Widget in Motion and FCP | Notes                                         |
| ----------------- | ------------------------ | --------------------------------------------- |
| Real              | Floating-point slider    |                                               |
| 2D Point          | X/Y sliders              |                                               |
| 3D Point          | X/Y/Z sliders            |                                               |
| 4D Point          | X/Y/Z/W sliders          |                                               |
| Integer           | Integer slider           |                                               |
| Boolean           | Toggle button            |                                               |
| Text              | String field             |                                               |
| Color             | Color well               |                                               |
| Image             | Image well               | Not available in Final Cut Pro                |
| Option types      | Pop-up menu              | Data values edited in Vuo using menus         |
| None (event-only) | Push Button              | Fires an event when the button is pushed      |

Published input ports that have menu input editors in Vuo may behave the same or differently in Final Cut Pro, depending on the port's data type. You can check the port's data type by clicking on the port to open its popover. If the data type is something other than Integer — for example, the Blend Mode type of the \vuoNode{Blend Images} node's \vuoPort{Blend Mode} port — then Final Cut Pro will present a menu. If the data type is Integer, then Final Cut Pro will present a slider to select by number, with 0 corresponding to the first menu item.

You can adjust the default, minimum, and maximum values for a parameter in Final Cut Pro by editing the published input port in Vuo. Right-click on the published input port and select \menu{Edit Value…} to change the default value or \menu{Edit Details…} to change the minimum and maximum.

### Image scaling
\definition{Scale Factor}{The ratio of pixels per linear point.  For example, Scale Factor 2 means there are 2 pixels per linear point, or 4 pixels per square point.}

When Final Cut Pro provides images to your composition via the Image Filter's `image` input port, or the Image Transition's `startImage` and `endImage` input ports, Vuo assigns the image a \term{Scale Factor} based on the scale of the image relative to the Motion Template.  Some image filter nodes use the Scale Factor to keep effects looking consistent between Final Cut Pro's Better Performance and Better Quality modes (see the \vuoNodeClass{vuo.image} node set documentation for a list of these nodes).  All image filter nodes give their output image the same scale factor as the input image.

Vuo creates Motion Templates with resolution 5120x2700.  If, for example, your Final Cut Pro project is 1920x1080, the input image's Scale Factor will be 0.375 (1920/5120) in Better Quality Mode, or 0.1875 (1920/5120/2) in Better Performance Mode.  If you use a `Blur Image` node with radius 100 points, it will be scaled to 37.5 pixels in Better Quality Mode, or 18.75 pixels in Better Performance mode, resulting in the same effective blur amount in both modes.

### Sharing plugins

You can share FxPlug plugins you've created in Vuo with other people, even if they don't have Vuo. There are two files associated with a plugin. To find them:

   - FxPlug wrapper app
      - When exporting a composition, Vuo asks you to choose where to place the wrapper app
   - Motion template
      - In Finder, go to \menu{Go > Home}.
      - In that folder, navigate to \directory{Movies > Motion Templates}.
      - Within the \directory{Effects}, \directory{Generators}, or \directory{Transitions} folder, locate the file for your plugin.

You can send these two files to someone else, who can install them in the same location on their computer. Both files are needed for the plugin to work.

### Uninstalling plugins

To uninstall a plugin that was exported from Vuo:

   - Quit Final Cut Pro and Motion.
   - Locate the two files described in the previous section, and throw them in the Trash.

### Maintaining compatibility between plugin versions
Each FxPlug has a unique identifier (UUID).  Vuo generates this unique identifier based on your composition's Bundle Identifier, which you can set in \menu{Edit > Composition Information…}, under the Exporting tab.  Final Cut Pro X uses this identifier to keep track of which plugin provides the effects for clips on the timeline.

For example, say you release version 1.0 of a plugin, and people start using it in their Final Cut Pro X projects.  Then you want to release version 1.1 of your plugin which fixes a small issue — if the new version has the same Bundle Identifier as version 1.0, then the updated plugin will automatically be used throughout people's existing Final Cut Pro X projects when they install the plugin.  You can even change the name of the plugin (\menu{Edit > Composition Information…}, under the General tab), and it will continue to be associated with people's existing Final Cut Pro X projects.

Then, say, you want to release version 2.0 of your plugin, which differs significantly from version 1.  You don't want the updated plugin to automatically be used in people's existing Final Cut Pro X projects, since the changes in 2.0 might cause unwanted appearance changes to their projects.  In this case, you should change the Bundle Identifier — for example, add a `.2` suffix, as in `com.mycompany.myplugin.2` — so people will be able to continue using the old version of your plugin in their existing projects, while also being able to use the new version of your plugin when they pick it from Final Cut Pro X's Effects, Transitions, or Generators browser.

## Exporting an FFGL plugin
<abstract>Creating FFGL plugins for VJ software</abstract>

\newInVersion{2.0}

You can turn your Vuo compositions into FFGL (FreeFrame 1.6+) plugins that can be loaded by many VJ apps on macOS, including Resolume Avenue, Resolume Arena, Magic Music Visuals, VDMX, and Isadora 3.

FFGL plugins exported from Vuo can run only in 64-bit apps. Most macOS apps these days are 64-bit, although some older VJ apps are still 32-bit. You can check your app's documentation to see if it's 64-bit or 32-bit.

You can create three kinds of FFGL plugins in Vuo: *sources* using the image generator protocol, *effects* using the image filter protocol, and *blend modes* using the image transition protocol. To learn how to use protocols, see [Making compositions fit a mold with protocols](#making-compositions-fit-a-mold-with-protocols).

After exporting an FFGL plugin, you may need to restart your VJ app for the plugin to become available.

### Sources

   - In Vuo, go to \menu{File > New Composition from Template > Export > FFGL > Source}. This creates a composition that conforms to the [Image Generator protocol](#making-compositions-fit-a-mold-with-protocols).
   - Add nodes to the composition to make it output a stream of images.
   - Go to \menu{File > Export > Mac FFGL Plugin}.

### Effects

   - In Vuo, go to \menu{File > New Composition from Template > Export > FFGL > Effect}. This creates a composition that conforms to the [Image Filter protocol](#making-compositions-fit-a-mold-with-protocols).
   - Add nodes to the composition to make it alter the input image and output the result.
   - Go to \menu{File > Export > Mac FFGL Plugin}.

### Blend modes

   - In Vuo, go to \menu{File > New Composition from Template > Export > FFGL > Blend Mode}. This creates a composition that conforms to the [Image Transition protocol](#making-compositions-fit-a-mold-with-protocols).
   - Add nodes to the composition to make it combine the input images and output the result.
   - Go to \menu{File > Export > Mac FFGL Plugin}.

### Name

Vuo names the plugin according to the Name field in \menu{Edit > Composition Information…} under the General tab. Since FFGL limits plugin names to 16 characters, Vuo shortens the name if needed.

### Parameters

In addition to the published ports required by the Image Filter or Image Generator protocol, you can create other published input ports to appear as parameters in your VJ app.

You can use the following data types for non-protocol published input ports for FFGL plugins:

| Data type | Scaled range | Shortened name | Notes |
| ----------|-------|-------------|-------|
| Real | 0 to 1 | 16 characters |
| 2D Point | (0,0) to (1,1) | 14 characters |
| 3D Point | (0,0,0) to (1,1,1) | 14 characters |
| 4D Point | (0,0,0,0) to (1,1,1,1) | 14 characters |
| Integer | 0 to 1 | 16 characters |
| Boolean | | 16 characters |
| Text | | 16 characters |
| Color | | 14 characters |
| Image | | 16 characters | Not supported in Resolume |

Since FFGL limits numeric values to the range 0 to 1, Vuo automatically scales parameter values from that range to the range you've specified in your composition (by right-clicking on the published input port, going to \menu{Edit Details…}, and editing Suggested Min and Suggested Max). For example, if you have a Real published input port with Suggested Min -10 and Suggested Max 10, your VJ app will show a slider from 0 to 1. Your composition will get an input value of -10 when the slider is at 0, -5 when the slider is at 0.25, and 10 when the slider is at 1.

Since FFGL limits parameter names to 16 characters, Vuo shortens names if needed. For 2D, 3D, and 4D Point published input ports, Vuo creates a separate parameter for each coordinate (X, Y, Z, or W) and appends a space and the coordinate name to the parameter name. To fit in these 2 extra characters, Vuo shortens the rest of the name to 14 characters. Similarly, for Color published input ports, Vuo creates a separate parameter for each channel (R, G, B, or A).

### Sharing plugins

You can share FFGL plugins you've created in Vuo with other people, even if they don't have Vuo. To find an FFGL plugin that you've exported:

   - In Finder, hold down \keys{⌥} and go to \menu{Go > Library}.
   - In that folder, navigate to \directory{Graphics > FreeFrame Plug-Ins}.
   - Locate the plugin (a `.bundle` file).

You can send this file to someone else, who can install it in the same location on their computer.

### Uninstalling plugins

To uninstall an FFGL plugin that was exported from Vuo, locate the `.bundle` file as described in the previous section and throw it in the Trash.

## Exporting an application
<abstract>Creating a standalone macOS application</abstract>

Using the \menu{File > Export > Mac App…} menu item, you can turn your composition into an macOS application (`.app` file) that will run on macOS Sierra (10.12) and later.

When exporting a composition that refers to files on your computer (such as images, scenes, or movies), typically Vuo will know to copy those into the exported app. If you've added these files to your composition by [dragging them onto the canvas](#adding-nodes-to-the-canvas-by-dropping-files) (without holding down \keys{⌥}) — creating a node such as \vuoNode{Fetch Image} or \vuoNode{Play Movie} — then the files will automatically be copied into the exported app. In fact, Vuo will automatically copy files and folders for all relative paths found in ports named \vuoPort{URL}, \vuoPort{URLs}, or \vuoPort{Folder} on nodes that read files.

If you've held down \keys{⌥} while dragging a file onto the canvas, or if you've typed an absolute path into the input editor for a URL, then Vuo won't copy the file into the exported app. This is useful if you want to refer to a file that you know will be in a certain location on every computer that runs the app, such as an image that comes with the operating system.

In some cases, you may want a file to be copied into the app, but Vuo may not be able to figure this out. This may happen, for example, if your composition uses an \vuoNode{Append Text} node to construct relative file paths out of smaller pieces. If Vuo doesn't copy your files into the exported app automatically, then you can copy them yourself. For example, if your composition uses a file called `image.png`:

   - Place `image.png` in the same folder as your composition (.vuo file).
   - Go to \menu{File > Export > Mac App…} and create `MyApp.app`.
   - Right-click on `MyApp.app` and choose \menu{Show Package Contents}.
   - In the package contents, go to the \directory{Contents/Resources} folder. Copy `image.png` into that folder.


# Turning graphics shaders into nodes
<abstract>Vuo can turn a GLSL/ISF fragment shader into a node</abstract>

\newInVersion{2.0}

If you're familiar with the programming languages C/C++ and GLSL, you can create your own graphics nodes using [Vuo's SDK](https://api.vuo.org/VUO_VERSION/group___developing_node_classes_types.html).

For certain kinds of graphics nodes, there's a shortcut. You don't have to write C/C++ boilerplate, just GLSL. And you don't have to use the Vuo SDK; you can edit the code without leaving the Vuo application.

Vuo can turn GLSL fragment shaders in [Interactive Shader Format (ISF)](https://www.interactiveshaderformat.com/) into nodes. The ISF code's inputs and output are automatically turned into input and output ports on the node.

## Creating an ISF node

There are two ways to begin developing an ISF node in Vuo. One is to start with an ISF fragment shader that you've already written or downloaded. Save the file to the same location that you would [install a node](#installing-a-node). Then find the node in your Node Library, right-click on it, and go to \menu{Edit Shader…}. (Vuo supports loading ISF source code consisting of a single `.fs` file. If the source code also has a vertex shader in a `.vs` file, Vuo may or may not be able to load it; this is an experimental feature.)

The other way is to start from scratch. Go to \menu{File > New Shader > Image Filter}, \menu{Image Generator}, or \menu{Image Transition}. ([Making compositions fit a mold with protocols](#making-compositions-fit-a-mold-with-protocols) explains Image Filters, Image Generators, and Image Transitions.) This opens a window with a small template as a starting point.

\vuoScreenshot{IsfNewImageFilter}

## Editing an ISF node
<abstract>Modifying shader code and published input ports</abstract>

The ISF code's inputs appear as published input ports in the left sidebar. As with published input ports in a composition, you can edit their default values and suggested ranges, rename them, and add more. The published input ports correspond to variables in the source code (as explained later in this section). If you rename a published input port, you also need to rename the corresponding variable.

You can preview the shader using the \menu{Run} button. You can edit the shader's published input ports and GLSL code while  it's running. Changes to a published input port's value and details take effect immediately. For other kinds of changes, after editing, go to \menu{Run > Restart} to make your changes take effect in the running preview.

If there are any problems with your shader that prevent it from compiling, the error messages are displayed at the bottom of the window, with the relevant lines marked alongside the code.

\vuoScreenshot{IsfImageFilterWithError}

To change the title, keywords, description, and other metadata of the ISF node, go to \menu{Edit > Composition Information…}.

If you'd prefer, you can edit the ISF source code in a text editor of your choice. Be aware that changes will only take effect in Vuo when you save the file. You won't see errors reported in your text editor, only in \menu{Tools > Show Console}. If you're using TextEdit, be sure to disable Smart Quotes.

## Saving an ISF node
<abstract>Saving a shader to a Library folder</abstract>

To be able to use a shader as a node, you'll need to save it to one of the locations where you would [install a node](#installing-a-node).

You can also edit and run shaders in Vuo without installing them as nodes. These shaders can be saved anywhere on your computer.

## How ISF source code translates to a Vuo node
<abstract>The nitty-gritty of programming Vuo nodes in ISF</abstract>

This section explains how elements in the ISF source code map to elements of the Vuo node. The mapping looks a little different depending on whether you're editing the ISF source code within Vuo or in your own text editor.

### Node metadata

As with subcompositions and other custom nodes, when you install an ISF file as a node, the file name becomes the node class name. For example, an ISF file called `me.image.squiggle.fs` becomes a node with class name \vuoNodeClass{me.image.squiggle}.

<?dbhtml stop-chunking?>

#### When editing in a text editor

The keys and values in the JSON-formatted comment at the beginning of the ISF file are translated to the Vuo node as follows.

| ISF key | Vuo node characteristic | Notes |
|---------|-------------------------|-------|
| `LABEL` | Title | Shown at the top of the node. |
| `DESCRIPTION` | Description | Shown in the Node Library. |
| `CREDIT` | Appended to description | Shown in the Node Library. |
| `VSN` | Version | Shown in the Node Library. |
| `KEYWORDS` | Keywords | Used when searching the Node Library. |

#### When editing within Vuo

When editing the ISF source code inside of Vuo, the JSON-formatted comment is hidden. Instead, use \menu{Edit > Composition Information…} to edit the node metadata.

### Ports

<?dbhtml stop-chunking?>

#### When editing in a text editor

In most cases, the input and output ports on the Vuo node correspond to the items listed under `INPUTS` and `OUTPUTS` in the ISF file's JSON-formatted comment.

| ISF key              | Vuo port characteristic | Notes                               |
| -------------------- | ----------------------- | ----------------------------------- |
| `NAME` | Internal name | Used when saving a composition to file. |
| `LABEL` | Display name | Shown on the node. |
| `TYPE` | Data type | See the next section for details. |
| `DEFAULT` | Initial/default constant value | For input ports only. |
| `MIN`, `MAX`, `STEP` | Suggested minimum, maximum, and step value | For input ports only. Used in the input editor. |
| `VALUES`, `LABELS` | Menu items | For integer input ports with a fixed set of options. Used in the input editor. |

If an ISF input has `"TYPE"="size"`, it is turned into two integer input ports on the Vuo node: \vuoPort{Width} and \vuoPort{Height}.

If an ISF file provides no way to determine the output image's size — no input with `"TYPE":"image"` or `"TYPE"="size"` — then input ports \vuoPort{Width} and \vuoPort{Height} are automatically added to the Vuo node.

If an ISF file lacks an output with `"TYPE"="image"`, an output port called \vuoPort{Output Image} is added automatically to the Vuo node.

One Vuo input port is unusual in that it's not determined by the `INPUTS` and `OUTPUTS` (or lack thereof) in the JSON-formatted comment, but rather by the content of the GLSL code. That is the \vuoPort{Time} port. In any ISF shader, a uniform called `TIME` of type float is automatically declared. If you use the `TIME` uniform anywhere in your GLSL code, an input port called \vuoPort{Time} is added to your Vuo node automatically.

#### When editing within Vuo

Instead of editing the `INPUTS` in the JSON-formatted comment, which is hidden, you can add, remove, and modify the input ports that are displayed in the sidebar of the shader editor.

Each input port is available as a uniform in the ISF code. Typically, the uniform name is the same as the port name. There are a few exceptions:

   - The \vuoPort{time} (lowercase) input port corresponds to the `TIME` (uppercase) uniform value
   - For Image Filter shaders:
      - The \vuoPort{image} input port corresponds to the `inputImage` sampler
      - The size of the \vuoPort{image} input corresponds to the `RENDERSIZE` uniform value
   - For Image Generator shaders:
      - The \vuoPort{width} and \vuoPort{height} input ports correspond to the `RENDERSIZE` uniform value

### Data types

Vuo supports most ISF data types plus some additional data types specific to Vuo.

| ISF data type | Vuo data type | Vuo-specific? |
|---------------|---------------|---------------|
| `event` | Boolean | no |
| `bool` | Boolean | no |
| `long` | Integer | no |
| `float` | Real | no |
| `color` | Color | no |
| `image` | Image | no |
| `point2d` | 2D Point | no |
| `point3d` | 3D Point | yes |
| `point4d` | 4D Point | yes |
| `colorDepth` | Image Color Depth | yes |
| `size` | Converted to two Integer ports | yes |
| `bool[]` | Boolean List | yes |
| `long[]` | Integer List | yes |
| `float[]` | Real List | yes |
| `point2d[]` | 2D Point List | yes |
| `point3d[]` | 3D Point List | yes |
| `point4d[]` | 4D Point List | yes |
| `color[]` | Color List | yes |

### Output image size and color depth

If the Vuo node created from an ISF shader has input ports \vuoPort{Width} and \vuoPort{Height}, the output image's size is set by these ports. Otherwise, the output image's size is the same as the image in the first populated image port — in other words, the top-most image port whose popover shows a value other than "(no image)".

If the Vuo node has an input port of type Image Color Depth, the output image's color depth is set by that port. Otherwise, the output image's size matches the image in the first populated image port.

### Coordinates

Although not part of the ISF 2.0 specification, to be consistent with many official and unofficial examples of ISFs, Vuo treats inputs of type 2D point specially. If an input has type 2D point and does not have `MIN` and `MAX` specified, then the input port value is scaled from normalized coordinates to pixel coordinates when used as a uniform in the GLSL code. For example, if an input port has value (1.0, 0.5) and the output image is to be 1000 x 800 pixels, then the uniform has value (1000, 400).

3D and 4D points are not scaled.

### Examples

The examples below focus on how ISF source code translates to Vuo node characteristics, with minimal GLSL code. (For examples with more interesting GLSL code, see the [ISF website](https://www.interactiveshaderformat.com/).) After each ISF source listing is the Vuo node that it creates.

\begin{lstlisting}[language=C,caption=Input and output ports are added automatically.]
/*{
   "LABEL":"Make Red Image"
}*/

void main()
{
   gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
}
\end{lstlisting}

\vuoScreenshot{IsfMakeRedImage}


\begin{lstlisting}[language=C,caption=Input and output ports are specified in the ISF code.]
/*{
   "ISFVSN":"2.0",
   "TYPE":"IMAGE",
   "LABEL":"Make Opaque Color Image",
   "INPUTS":[
      {
         "NAME":"fill",
         "LABEL":"Fill Color",
         "TYPE":"color",
         "DEFAULT":
         {
            "r":0.0,
            "g":0.0,
            "b":1.0,
            "a":1.0
         }
      },
      {
         "TYPE":"size"
      }
   ],
   "OUTPUTS":[
      {
         "NAME":"colorImage",
         "TYPE":"image"
      }
   ]
}*/

void main()
{
   gl_FragColor = vec4(fill.rgb, 1.0);
}
\end{lstlisting}

\vuoScreenshot{IsfMakeOpaqueColorImage}


\begin{lstlisting}[language=C,caption=An input port with suggested minimum and maximum values.]
/*{
   "LABEL":"Replace Red Channel",
   "INPUTS":[
      {
         "NAME":"inputImage",
         "TYPE":"image"
      },
      {
         "NAME":"red",
         "TYPE":"float",
         "MIN":0.1,
         "MAX":0.9,
         "DEFAULT":0.5
      }
   ]
}*/

void main()
{
   gl_FragColor = vec4(red, IMG_THIS_NORM_PIXEL(inputImage).gba);
}
\end{lstlisting}

\vuoScreenshot{IsfReplaceRedChannel}


\begin{lstlisting}[language=C,caption=A menu input port.]
/*{
   "LABEL":"Blend Image Components",
   "INPUTS":[
      {
         "NAME":"image1",
         "TYPE":"image"
      },
      {
         "NAME":"image2",
         "TYPE":"image"
      },
      {
         "NAME":"blendType",
         "TYPE":"long",
         "VALUES":[0, 1],
         "LABELS":["Darker Component", "Lighter Component"]
      }
   ]
}*/

void main()
{
   vec4 color1 = IMG_THIS_NORM_PIXEL(image1);
   vec4 color2 = IMG_THIS_NORM_PIXEL(image2);
   gl_FragColor = (1 - blendType) * min(color1, color2)
                  + blendType * max(color1, color2);
}
\end{lstlisting}

\vuoScreenshot{IsfBlendImageComponents}


## Supported ISF features
<abstract>Functions and uniforms available when implementing ISF nodes</abstract>

Vuo recognizes most fragment shaders that conform to the [ISF 2.0 specification](https://www.interactiveshaderformat.com/spec).

### Functions

Vuo supports these ISF-specific functions:

| Function                           | Description                       |
| ---------------------------------- | --------------------------------- |
| `vec4 IMG_PIXEL(image, vec2)` | The color of a pixel in an image, using pixel-based coordinates. |
| `vec4 IMG_NORM_PIXEL(image, vec2)` | The color of a pixel in an image, using normalized coordinates. |
| `vec4 IMG_THIS_PIXEL(image)` | The color of the pixel that the fragment shader is currently executing on. |
| `vec4 IMG_THIS_NORM_PIXEL(image)` | The color of the pixel that the fragment shader is currently executing on. |
| `vec2 IMG_SIZE(image)` | The size of an image, in pixels. |

Vuo also supports these Vuo-specific functions in ISF code:

| Function | Description |
| ---------|-------------|
| `int LIST_LENGTH(list)` | The number of items in a list that was declared in `INPUTS`. |

### Uniforms

Vuo supports these ISF-specific uniforms:

| Uniform | Description |
| --------|-------------|
| `vec2 RENDERSIZE` | The size of the output image, in pixels.  For Image Generators, the \vuoPort{width} and \vuoPort{height} input ports correspond to the `RENDERSIZE` uniform value.  For Image Filters, the size of the input \vuoPort{image} corresponds to the `RENDERSIZE` uniform value. |
| `float TIME` | The time since the composition started, in seconds.  The \vuoPort{time} (lowercase) input port determines the `TIME` (uppercase) uniform value. |
| `float TIMEDELTA` | The time since the previous frame was rendered, in seconds. For the first frame, this is 0. |
| `vec2 isf_FragNormCoord` | The normalized coordinates of the pixel that the fragment shader is currently executing on. |
| `vec4 DATE` | The current date and time: year, month, day, and seconds since midnight. |
| `int FRAMEINDEX` | 0 for the 1st frame, 1 for the 2nd frame, 2 for the 3rd frame, and so on. |

### Unsupported

Vuo does not currently support:

   - multiple passes/buffers (`PASSES` key and `PASSINDEX` uniform)
   - image file loading (`IMPORTED` key)
   - audio input (`audio` and `audioFFT` data types)



# The Vuo editor
<abstract>Changing how the Node Library appears, and searching the Node Library</abstract>

Contents:

   - [The Node Library](#the-node-library)
   - [Working on the canvas](#working-on-the-canvas)
   - [Running a composition](#running-a-composition)
   - [Editing composition information](#editing-composition-information)
   - [Working with subcompositions](#working-with-subcompositions)
   - [Changing the editor’s appearance](#changing-the-editors-appearance)
   - [Keyboard Shortcuts](#keyboard-shortcuts)

## The Node Library

\definition{Node Library}{The panel or floating window in Vuo's user interface that lets you explore and use Vuo's \term{node}s}

When you create a composition, your starting point is always the \term{Node Library} (\menu{View > Node Library > Show Node Library}). The node library is a tool that will assist you in exploring and making use of the collection of Vuo building blocks ("nodes") available to you as you create your artistic compositions.

Because you'll be working extensively with the node library throughout your composition process, we have put a great deal of effort into maximizing its utility, flexibility, and ease of use. It has been designed to jump-start your Vuo experience --- so that you may sit down and immediately begin exploring and composing, without having to take time out to study reams of documentation.

When you open a new composition, the Node Library is on the left. The Node Library shows all the nodes that are available to you. In the Node Library, you can search for a node by name or keyword. You can see details about a node, including its documentation and version number.

### Docking and visibility

By default, the node library is docked within each open composition window. You can undock the node library by dragging or double-clicking its title bar. While undocked, only a single node library will be displayed no matter how many composition windows are open.  You can re-dock the node library by double-clicking its title bar.

\tip{The symbols that represent macOS keys are listed in the introduction to \hyperlink{keyboard-shortcuts}{Keyboard Shortcuts}.}

You can hide the node library by clicking the circle within its title bar, or by pressing \keys{⎋} once (if the search bar is empty) or twice (first to clear the search bar, then to close the node library). Once hidden, you can re-display it by selecting \menu{View > Node Library > Show Node Library} or using \keys{⌘↵}. The same command or shortcut, \keys{⌘↵}, will put your cursor in the node library's search box.

Whether you have left your library docked or undocked, visible or hidden, your preference will be remembered the next time you launch Vuo.

### Node names and node display

\definition{node title}{A quick description of a node's function, shown at the top of a node}
\definition{node class name}{A categorical name that reveals specific information about a node, shown directly below the node's title}

Each node has two names: a title and a class name. The \term{node title} is a quick description of a node's function; it's the most prominent name written on a node. The \term{node class name} is a categorical name that reveals specific information about a node; it appears directly below the node's title.

\vuoImage{0.5}{nodenames.pdf}

Let's use the \vuoNode{Count} node as an example. "Count" is the node's title, which reveals that the node performs the function of counting. The class name is "vuo.math.count". The class name reveals the following: Team Vuo created it, "math" is the category, and "count" is the specific function (and title name).

Depending on your level of familiarity with Vuo's node sets and your personal preference, you might wish to browse nodes by their fully qualified family ("class") name (e.g., "vuo.math.add") or by their more natural human-readable names ("Add").

You may select whichever display mode you prefer, and switch between the modes at your convenience; the editor will remember your preference between sessions. You can toggle between node titles and node class names using the menu items \menu{View > Node Library > Display by class} or \menu{Display by name}.

The [Editing node settings](#editing-node-settings) section explains how to change node titles.

### Node Documentation Panel

\definition{Node Documentation Panel}{The lower section of the \term{Node Library}, which describes the general purpose of the node as well as details that will help you use it}

The node library makes the complete set of Vuo core nodes available for you to browse as you compose. By clicking on a node in the library, a description of the node will appear in the \term{Node Documentation Panel} below the node library. It describes the general purpose of the node as well as details that will help you make use of it. In addition to the Vuo core nodes, if you have access to pro nodes, you'll see those displayed.

If you're interested in exploring new opportunities, this is an ideal way to casually familiarize yourself with the building blocks available to you in Vuo.

### Searching for nodes

At the top of the Node Library is a search bar. When you type in a search phrase, matching nodes will show up in the Node Library. Pressing \keys{⎋} while in the search bar will clear out your selection and show the entire Node Library, as will deleting your search term by pressing \keys{⌫}.

You can search by node title, node class name, and a variety of keywords:

| Type of search        | Example search phrase | Example search results                        |
|-----------------------|-----------------------|-----------------------------------------------|
| Keyword | *trigonometry* | \vuoNode{Calculate Sine}, |
|         |                | \vuoNode{Calculate Cosine}, |
|         |                | and others |
| Node title | *radial blur* | \vuoNode{Blur Image Radially} |
| Node class name | *vuo.mouse* | \vuoNode{Receive Mouse Moves} (\vuoNodeClass{vuo.mouse.move2}), |
|                 |             | \vuoNode{Receive Mouse Buttons} (\vuoNodeClass{vuo.mouse.button2}), |
|                 |             | and others |
| Port name | *month* | \vuoNode{Make Date-Time}, |
|           |         | \vuoNode{Get Date-Time Values}, |
|           |         | and others |
| Input port name | *in:month* | \vuoNode{Make Date-Time} and |
|                 |            | \vuoNode{Make Relative Date-Time} |
| Output port name | *out:month* | \vuoNode{Get Date-Time Values} and |
|                  |             | \vuoNode{Get Relative Date-Time Values} |
| Input port type | *in:videoframe* | \vuoNode{Save Frames to Movie}, |
|                 |                 | \vuoNode{Get Frame Values (Video)}, |
|                 |                 | and others |
| Output port type | *out:point3d* | \vuoNode{Curve}, \vuoNode{Scale}, and others |
| Nodes with triggers | *trigger*, *fire*, or *bang* | Nodes that have one or more trigger ports |
| Input and output nodes | *i/o* | Nodes whose title begins with *Receive* or *Send* |
| Image filters | *filter* | Nodes that input one image and output a filtered image |
| Image generators | *generator* | Nodes that produce an image |
| Image transitions | *transition* | Nodes that input two images and output an in-between image |
| Pro nodes | *pro* or *premium* | Nodes that are only available with a Pro license |
| Subcompositions | *subcomposition* or | Nodes that are subcompositions |
|                 | *source:.vuo*       | |
| Community nodes | *source:.vuonode*, | Nodes installed as `.vuonode`, `.fs`, or `.c` files |
|                 | *source:.fs*, or   | |
|                 | *source:.c*        | |

The search finds all nodes that match on the title *or* class name *or* keyword. For example, if you search for *filter*, the results include \vuoNode{Filter Note} (which has *filter* in the title and class name), \vuoNode{Allow First Event} (which has *filter* as a keyword), and \vuoNode{Adjust Image Colors} (which is an image filter). If you wanted to narrow the search to nodes like the last one, you could search for *image filter*.

If the search doesn't find a node that you expect to see:

   - Make sure you're using a version of Vuo that has the node.
      - If the node was recently added, make sure you're using the latest version of Vuo.
      - If the node has been [deprecated](#deprecated-nodes), instead use the node that is meant to replace it.
   - If the node is a [Pro node](#pro-nodes), make sure you've [activated Vuo Pro](#activating-vuo-pro).
   - If the node is a subcomposition or a community node, review the steps for [installing a node](#installing-a-node).

## Working on the canvas
<abstract>Creating and manipulating nodes and cables</abstract>

Contents:

   - [Putting a node on the canvas](#putting-a-node-on-the-canvas)
   - [Drawing cables to create a composition](#drawing-cables-to-create-a-composition)
   - [Adding a comment](#adding-a-comment)
   - [Copying and pasting nodes, cables, and comments](#copying-and-pasting-nodes-cables-and-comments)
   - [Deleting nodes, cables, and comments](#deleting-nodes-cables-and-comments)
   - [Rearranging nodes, cables, and comments](#rearranging-nodes-cables-and-comments)
   - [Replacing nodes](#replacing-nodes)
   - [Editing node settings](#editing-node-settings)
   - [Editing port values and settings](#editing-port-values-and-settings)
   - [Finding nodes on the canvas](#finding-nodes-on-the-canvas)
   - [Viewing a composition](#viewing-a-composition)
   - [Publishing ports](#publishing-ports)
   - [Using a protocol for published ports](#using-a-protocol-for-published-ports)

### Putting a node on the canvas

The node library isn't just for reading about nodes, but for incorporating them into your compositions. Once you have found a node of interest, you may create your own copy by dragging it straight from the node library onto your canvas, or by double-clicking the node listing within the library.

Not a mouse person? Navigating the library by arrow key and pressing \keys{↵} to copy the node to your canvas works just as well.

You may copy nodes from the library individually, or select any number or combination of nodes from the library and add them all to your canvas simultaneously with a single keypress or mouse drag --- whatever best suits your work style.

You can add certain commonly used nodes — such as \vuoNode{Share Value}, \vuoNode{Hold Value}, and \vuoNode{Allow Changes} — to your composition without a trip to the node library. Just right-click on the canvas and select an item from the \menu{Insert Node} menu.

### Drawing cables to create a composition

You can create a cable by dragging from a node's output port to a compatible input port or from a node's output port to a compatible input port.

Compatible ports are those that output and accept matching or convertible types of data. Compatible ports are highlighted as you drag your cable, so you know where it's possible to complete the connection.

If you complete your cable connection between two ports whose data types are not identical, but that are convertible using an available type converter (e.g., vuo.math.round for rounding real numbers to integers), that type converter will be automatically inserted when you complete the connection.

\definition{yank zone}{The section of the cable with the extra-bright highlighting when hovering over it, which lets you drag the cable away from an input port to which it is currently connected}

Sometimes existing cables may also be re-routed by dragging (or "yanking") them away from the input port to which they are currently connected. It is possible to yank the cable from anywhere within its \term{yank zone}. You can tell where a cable's yank zone begins by hovering your cursor near the cable. The yank zone is the section of the cable with the extra-bright highlighting. If no yank zone is highlighted, you'll need to delete and add back the cable.

### Adding a comment
You can add a comment to a composition by using the \menu{Edit > Insert Comment} menu option, or by right-clicking on the canvas and selecting \menu{Insert Comment} from the menu.

When you create a comment, you will be in editing mode, and can start typing the comment's text.  Text inside a comment uses [Markdown formatting](https://www.markdownguide.org/cheat-sheet).  This is especially useful if you want to include a link, or make the text larger by using headings.  To start a new line, finish the line with two or more trailing spaces, then press \keys{⌥↵} to continue on a new line.  To start a new paragraph, add a blank line after the previous line of text, \keys{⌥↵⌥↵}.

To end editing, either press \keys{↵} or click outside the comment area.  To reenter editing mode, double click within the comment area or right-click on the comment and pick \menu{Edit…} from the menu.

To change the color of a comment, right-click on the comment and pick \menu{Tint} from the menu.

To move a comment, hover over the top edge of the comment and drag the handle that appears.  To resize a comment, hover over the bottom-right corner of the comment and drag the handle that appears.

To select a comment, click on the comment's text, click near the top edge of the comment, or rubberband-select the top edge of the comment.  (Clicking or rubberbanding the part of the comment below the text does not select the comment, so when you place nodes in that area you can easily rubberband-select the nodes.)

### Copying and pasting nodes, cables, and comments

You can select one or more nodes or comments, and copy or cut them using the \menu{Edit > Copy} and/or \menu{Edit > Cut} menu options, or their associated keyboard shortcuts. Any cables or type converters connecting the copied nodes will automatically be copied along with them.

You can paste your copied components into the same composition, a different composition, or a text editor, using the \menu{Edit > Paste} menu option or its keyboard shortcut.

\tip{Select one or more nodes and drag them while holding down \keys{⌥} to duplicate and drag your selection within the same composition. Press \keys{⎋} during the drag to cancel the duplication.}

### Deleting nodes, cables, and comments

Delete one or more nodes, cables, and/or comments from your canvas by selecting them and either pressing \keys{⌫} or right-clicking one of your selections and selecting \menu{Delete} from its context menu.

When you delete a node, any cables connected to that node are also deleted. A cable with a yank zone may also be deleted by yanking it from its connected input port and releasing it.

Any type converters that were helping to bridge non-identical port types are automatically deleted when their incoming cables are deleted.

### Rearranging nodes, cables, and comments

You can move nodes and comments within your canvas by selecting one or more of them and either dragging them or pressing the arrow keys on your keyboard.

\tip{Hold down \keys{⇧} while pressing an arrow key to move the nodes even faster.}

### Replacing nodes

Sometimes after adding a node to a composition, you might decide to replace it with something a little different. For example, you might like to replace a \vuoNode{Crop Image} node with a \vuoNode{Resize Image} node. If there are already cables hooked up to the original node, it can be inconvenient to disconnect each one and connect it to the new node. Fortunately, there's an alternative.

Right-click on the original node and go to the \menu{Change To} menu. Here, you can select from a list of similar nodes that can be substituted in without breaking any cable connections.

### Editing node settings

You can change a node's title (displayed at the top of the node) by double-clicking or hovering over the title and pressing \keys{↵}, then entering the new title in the node title editor that pops up. You may save or dismiss your changes by pressing \keys{↵} or \keys{⎋}, respectively, just as you would using a port's input editor. You can also select one or more nodes from your canvas and press \keys{↵} to edit the node titles for each of the selected nodes in sequence. If you delete the title and don't enter a new title, the node will default to its original title.

You can change a node's tint color by right-clicking on the node, selecting \menu{Tint} from its context menu, and selecting your color of choice. Tint colors can be a useful tool in organizing your composition. For example, they can be used to visually associate nodes working together to perform a particular task.

### Editing port values and settings

You can change the constant value for an input port by double-clicking the port, then entering the new value into the input editor that pops up. (Or you can open the input editor by hovering the cursor over the port and pressing \keys{↵}.) When the input editor is open, press \keys{↵} to accept the new value or \keys{⎋} to cancel.

Input editors take on various forms depending on the data type of the specific input being edited — they may present as a text field, a menu, or a widget (such as color picker wheel), for example.

Some ports take lists as input. These ports have special attached "drawers" containing 0 or more input ports whose values will make up the contents of the list. Drawers contain two input ports by default, but may be resized to include more or fewer ports by dragging the "drag handle."

You can change how a trigger port should behave when it's firing events faster than downstream nodes can process them. Do this by right-clicking on the port, selecting \menu{Set Event Throttling} from its context menu, and selecting either \menu{Enqueue Events} or \menu{Drop Events}.

### Finding nodes on the canvas

Using \menu{Edit > Find > Find…}, you can search the canvas for nodes matching a search phrase.

| Type of search | Example search phrase | Example search results                 |
|----------------|-----------------------|----------------------------------------|
| Node title | *blur image rad* | \vuoNode{Blur Image Radially} |
| Node class name | *vuo.mouse* | \vuoNode{Receive Mouse Moves} (\vuoNodeClass{vuo.mouse.move2}), |
|                 |             | \vuoNode{Receive Mouse Buttons} (\vuoNodeClass{vuo.mouse.button2}), |
|                 |             | and others |
| Port name | *month* | \vuoNode{Get Date-Time Values}, |
|           |         | \vuoNode{Make Date-Time}, |
|           |         | and others |
| Subcompositions | *.vuo* | Nodes that are subcompositions |
| Community nodes | *.vuonode*, *.fs*, or *.c* | Nodes installed as `.vuonode`, `.fs`, or `.c` files |
| Deprecated nodes | *deprecated* | Nodes that are deprecated |

### Viewing a composition

If your composition is too large to be displayed within a single viewport, you can use the Zoom buttons within the composition window's menubar, or the \menu{View > Actual Size} / \menu{Zoom In} / \menu{Zoom Out} / \menu{Zoom to Fit} menu options, or a pinch gesture on your trackpad, to adjust your view. You can use the scrollbars to scroll horizontally or vertically within the composition. Alternatively, if you have no nodes or cables selected, you can scroll by pressing the arrow keys on your keyboard. You can also grab the workspace by holding down the spacebar while dragging.

\tip{Hold down \keys{⇧} while pressing an arrow key to scroll even faster.}

### Publishing ports

A composition's published ports are displayed in sidebars, which you can show and hide using the menu \menu{View > Show/Hide Published Ports}.

You can publish any input or output port in a composition. Do this by right-clicking on the port and selecting \menu{Publish Port} from the context menu. You can unpublish the port by right-clicking on the port again and selecting \menu{Delete Published Port}.

Alternatively, you can publish a port by dragging a cable from the port to the \menu{Publish} well that appears in the sidebar when you start dragging.

You can create a published port without immediately connecting it to a port inside the composition by clicking on the New Port button in the sidebar. This pops up a menu for you to choose the data type of the published port. Once the published port has been created, you can drag a cable from it and connect the cable to any compatible port within the composition.

In the sidebars, you can rename a published port by right-clicking on the published port and selecting \menu{Rename Port…}. You can reorder published ports (except those that are part of a protocol) by dragging the name of a published port up or down in the sidebar.

For published ports with numerical data types (integers, real numbers, 2D points, 3D points, and 4D points), you can modify the behavior of their input editors by right-clicking on the published port in the sidebar and selecting \menu{Edit Details…}. The Suggested Min and Suggested Max determine the range of values provided by the input editor's slider or spinbox (arrow buttons). The Suggested Step controls the amount by which each click on a spinbox button increments or decrements the value.

### Using a protocol for published ports

To create a composition with a predetermined set of published ports defined by a protocol, go to the \menu{File} menu, select \menu{New Composition from Template}, and select the protocol you want. Typically, a protocol is used when running a Vuo composition inside another application, such as a VJ or video postproduction app. That application should instruct you about the protocol to select.

The published ports in a protocol appear in a tinted area of the published port sidebars, with the protocol name at the top. You can't rename or delete these published ports. However, you can add other published ports to the composition and rename or delete them as usual.


## Running a composition
<abstract>Starting and stopping a composition and firing events manually</abstract>

After you've built your composition (or while you're building it), you can run it to see it in action.


### Starting and stopping a composition

\tip{If your composition doesn't work as expected, see \hyperlink{troubleshooting}{Troubleshooting}.}

You can run a composition by clicking the Run button. (Or go to \menu{Run > Run}.)

You can stop a composition by clicking the Stop button. (Or go to \menu{Run > Stop}.)

If you start a composition that was created using \menu{New Composition from Template}, then extra functionality will be added to the composition to help you preview it. Its protocol published input ports will receive data and events, and its protocol published output ports will send their data and events to a preview window. For example, if you run a composition with the Image Filter protocol, then image and time data will be fed into the composition, and the composition's image output will be rendered to a window.


### Firing an event manually

As you're editing your running composition, you may want to fire extra events so that your changes become immediately visible, rather than waiting for the next time a trigger port happens to fire.

You can cause a trigger port to fire an event by right-clicking on the trigger port to pop up a menu, then choosing \menu{Fire Event}. Or you can hold down \keys{⌘} while left-clicking on the trigger port. If the trigger port carries data, it outputs its most recent data along with the event.

You can also fire an event directly into an input port (as if it had an incoming cable from an invisible trigger port). To do this, you can right-click on the input port and choose \menu{Fire Event}, or you can hold down \keys{⌘} and left-click on the input port.

If you've already manually fired an event, you can fire another event through the same port by going to \menu{Run > Re-fire Event}. This fires an event through the trigger port or input port that most recently had an event manually fired.


## Editing composition information
<abstract>Specifying metadata for compositions, exported apps, and exported plugins</abstract>

You can enter metadata about a composition by going to \menu{Edit > Composition Information…}. The information you enter in this dialog can help people understand how to use your composition or products exported from it, as well as provide a reminder to yourself.

Some of the fields in this dialog — Name, Version, Description, Copyright, Homepage Link, and Documentation Link — are displayed in the Node Library's lower panel when the composition is open. If you export an app from the composition, these fields are shown in the app's About dialog.

The Keywords field is used when the composition is installed as a subcomposition. You can search the Node Library for the subcomposition using the keywords.

The Icon for Exported App, Bundle Identifier, and FxPlug Group fields are used in apps or plugins exported from the composition.

The License field is saved in the composition (`.vuo`) file. You can view it by opening the file in a text editor.


## Working with subcompositions
<abstract>Installing, editing, and uninstalling subcompositions</abstract>

With a subcomposition, you can use a composition as a node within other compositions. For more on what subcompositions are and why to use them, see [Using subcompositions inside of other compositions](#using-subcompositions-inside-of-other-compositions).

### Installing a subcomposition

To turn part of an existing composition into a subcomposition, select those nodes and cables within the composition, then go to the \menu{Edit > Package as Subcomposition} menu item.

To turn an entire composition into a subcomposition, create or open the composition and select the \menu{File > Move to User Library} menu item. (If your composition has not yet been saved, the menu item will read \menu{Save to User Library}, and you'll be prompted to enter a title for your node.) The subcomposition node will immediately be listed and highlighted within your Node Library for use within other compositions.

To insert an empty subcomposition into a composition, select the \menu{Edit > Insert Subcomposition} menu item.

To install a subcomposition that you've downloaded, see [Installing a node](#installing-a-node).

### Editing a subcomposition

There are several ways to edit a subcomposition after it has already been installed:

   - Right-click on the subcomposition node, either within the Node Library or on the canvas, and select the \menu{Edit Composition…} context menu item.
   - Double-click on the body of the node on the canvas.
   - Select the node on the canvas and press ⌘↓.
   - Click the "Edit Composition…" link in the node library documentation panel.

### Uninstalling a subcomposition

To remove an installed subcomposition, right-click on the subcomposition node within the Node Library and select the \menu{Show in Finder} context menu item. Locate the `.vuo` file matching the name of your subcomposition and remove it from the folder.

## Changing the editor's appearance
<abstract>Options in the View menu</abstract>

In the View menu are several settings to make the editor more comfortable to use depending on your lighting conditions, screen size, and personal taste.

### Dark mode

\menu{View > Dark Interface} toggles between a light and a dark color scheme for the editor. The dark interface is only available in Vuo Pro.

### Transparency

\menu{View > Canvas Transparency} switches between three levels of transparency for the editor. With transparency enabled, other windows behind the editor are visible. This makes it possible to view a composition and its graphics output at the same time when both are fullscreen.

### Grid points and lines

\menu{View > Grid > Lines} / \menu{Points} show grid markings on the canvas.

\menu{View > Grid > Snap} toggles the "snap to grid" setting. When you position a node on the canvas with Snap enabled, the position is constrained so it's easier to align the node with others precisely.

### Toolbar labels

\menu{View > Show/Hide Toolbar Labels} toggles between the regular toolbar with labels on the buttons and a compact toolbar without labels. The compact toolbar is only available in Vuo Pro.

\newpage

## Keyboard Shortcuts
<abstract>Quickly access common functions</abstract>

Vuo has [keyboard shortcuts](https://support.apple.com/kb/ht1343) for working with your composition.

In the keyboard shortcuts below, these symbols represent keys in macOS:

| Symbol | Definition |
| ------:| ---------- |
| ⌘  | Command key |
| ⌃ | Control key |
| ⌥ | Option key |
| ⇧ | Shift key |
| ⌫ | Delete key |
| ↵ | Return key |
| ⎋ | Escape key |

<?dbhtml stop-chunking?>

### Working with composition files

|Shortcut  | Definition |
| ---:| --- |
| ⌘N | New Composition |
| ⌘O | Open Composition |
|⇧⌘O | Open the most recent composition |
|⌥⌘O | Open a random example composition |
| ⌘↓ | Open the composition contained in the selected subcomposition node |
| ⌘S | Save Composition |
|⇧⌘S | Save Composition As |
| ⌘W | Close Composition |

### Controlling the composition canvas

| Shortcut | Definition  |
| ---:| --- |
| ⌘↵ | Show Node Library |
| ⎋ | Clear Node Library search box, then close Node Library |
| ⌘= | Zoom In |
| ⌘- | Zoom Out |
| ⌘9 | Zoom to Fit |
| ⌘0 | Actual Size |
| ⇧ Double-click on comment | Zoom to fit the comment |
| Spacebar Drag | Move the canvas viewport |
| ⌘1 | Set canvas transparency to None |
| ⌘2 | Set canvas transparency to Slightly Transparent |
| ⌘3 | Set canvas transparency to Very Transparent |
| ⌘4 | Show or hide published ports |

### Creating and editing compositions

| Shortcut       | Definition                     |
| -------------: | ------------------------------ |
| ⌘A | Select all |
| ⇧⌘A | Select none |
| ⌘C | Copy |
| ⌘V | Paste |
| ⌘X | Cut |
| ⌘Z | Undo |
| ⇧⌘Z | Redo |
| ⌘F | Find |
| ⌘G | Find Next |
| ⇧⌘G | Find Previous |
| ⌫ | Delete |
| ⌘I | Composition Information |
| ⌥ Drag near input port | Duplicate the cable connected to the input port. |
| ⌥ Drag selected components | Duplicate the selected nodes, cables, and comments. |
| ⌥ while rubberband selecting | Select all cables within the rubberband area, not just those connected to selected nodes. |
| ⇧ while dragging cable | Change the data-and-event cable being dragged to event-only. |
| ↑↓←→ | Move the selected nodes, cables, and comments around on the canvas. Hold ⇧ to move further. |
| ↵ | Hover over a node title and press ↵ to edit it. |
| ↵ | Select one or more nodes and press ↵ to edit their titles. |
| ↵ | Hover the mouse over a constant value and press ↵ to edit it.  Press ↵ to accept the new value, or ⎋ to go back to the old value. |
| ⌥↵ | Open a Text input editor and press ⌥↵ to add a linebreak. |

### Creating and editing shaders

| Shortcut | Definition                     |
| -------: | ------------------------------ |
| ⌘5 | Show or hide GLSL/ISF Quick Reference |

### Running compositions (when the Vuo editor is active)

| Shortcut | Definition                     |
| -------: | ------------------------------ |
| ⌘. | Stop |
| ⌘R | Run |
| ⇧⌘R | Restart |
| ⌘ Click | Do this on an input port or a trigger port to manually fire an event. |
| ⌘T | Re-fire Event |

### Running compositions (when the composition is active)

| Shortcut | Definition                                                          |
| -------: | ------------------------------------------------------------------- |
|      ⌘Q | Stop the composition                                                |
|      ⌘F | Toggle between windowed and fullscreen                              |
|    ⌥⌘E | Toggle recording the composition's graphical output to a movie file |

### Application shortcuts

| Shortcut | Definition |
| ---:| --- |
| ⌘Q | Quit the Vuo editor |
| ⌘H | Hide the Vuo editor |



# The command-line tools
<abstract>Installing the Vuo SDK</abstract>

As an alternative to using the Vuo editor, you can use command-line tools to work with Vuo compositions. Although most Vuo users will only need the Vuo editor, you might want to use the command-line tools if:

   - You're writing a program or script that works with Vuo compositions. (Another option is the [Vuo API](https://api.vuo.org/VUO_VERSION/group___developing_applications.html).)
   - You're working with Vuo compositions in a text-only environment, such as SSH.

A Vuo composition (.vuo file) is actually a text file based on the [Graphviz DOT format](https://graphviz.gitlab.io/_pages/doc/info/lang.html). You can go through the complete process of creating, compiling, linking, and running a Vuo composition entirely in a shell.


## Installing the Vuo SDK

   - On vuo.org, select [Get Vuo > Additional downloads](https://vuo.org/releases)
   - Under the section for the most recent version, download the SDK package (`vuo-VUO_VERSION-sdk.pkg`)
   - Install the package file (double-click on it in Finder)
   - Open the `/Library/Developer/Vuo` folder
      - You can move the `/Library/Developer/Vuo` folder, but in order for the command-line binaries (`vuo-compile`, `vuo-link`, `vuo-export`) to work, they must be in the same folder as the Framework (`Vuo.framework`) and `resources` folder.
   - Next, add the command-line binaries to your `PATH` so you can easily run them from any folder.  In Terminal, run this command if you're using the ZSH shell (default in macOS 10.15 and later):

\code{echo \doublequote{}export PATH=\textbackslash\$PATH:/Library/Developer/Vuo/framework\doublequote\ \textgreater\textgreater\ \textasciitilde/.zprofile}

   - or if you're using the BASH shell (default in macOS 10.14 and earlier):

\code{echo \doublequote{}export PATH=\textbackslash\$PATH:/Library/Developer/Vuo/framework\doublequote\ \textgreater\textgreater\ \textasciitilde/.bash\textunderscore{}profile}

   - Close and re-open the Terminal window


## Getting help
<abstract>Information about the command-line tools</abstract>

To see the command-line options available, you can run each command-line tool with the `--help` flag.


## Building a composition on the command line
<abstract>Turning a .vuo file into an executable</abstract>

You can turn a `.vuo` file into an executable in two steps.

First, compile the `.vuo` file to a `.bc` file (LLVM bitcode):

\begin{lstlisting}[language=bash,caption=Compiling a Vuo composition]
vuo-compile --output RenderTextLayer.bc RenderTextLayer.vuo
\end{lstlisting}

Then, turn the `.bc` file into an executable:

\begin{lstlisting}[language=bash,caption=Linking a Vuo composition into an executable]
vuo-link --output RenderTextLayer RenderTextLayer.bc
\end{lstlisting}

If you run into trouble building a composition, you can get more information by running the above commands with the `--verbose` flag.

If you're editing a composition in a text editor, the `--list-node-classes=dot` flag is useful. It outputs all available nodes in a format that you can copy and paste into your composition.


## Running a composition on the command line
<abstract>Launching a composition</abstract>

You can run the executable you created just like any other executable:

\begin{lstlisting}[language=bash,caption=Running a Vuo composition]
./RenderTextLayer
\end{lstlisting}


## Exporting a composition on the command line
<abstract>Turn a composition into a movie, an app, or a plugin</abstract>

Using the `vuo-export` command, you can turn a composition into a movie, an app, or a plugin:

\begin{lstlisting}[language=bash,caption=Exporting a Vuo composition to a movie]
vuo-export movie --output GenerateCheckerboardImage.mov GenerateCheckerboardImage.vuo
\end{lstlisting}

\begin{lstlisting}[language=bash,caption=Exporting a Vuo composition to an application]
vuo-export macos --output RenderTextLayer.app RenderTextLayer.vuo
\end{lstlisting}

If you run into trouble exporting a composition, you can get more information by running `vuo-export` with the `--verbose` flag.

This command is equivalent to the \menu{File > Export > Mac App…} menu item in the Vuo editor. See the section [Exporting an application](#exporting-an-application) for more information.


## Printing the composition source code
<abstract>Creating a picture of your composition's nodes, cables, and comments</abstract>

Using the `vuo-export source` command, you can create a picture of your composition:

\begin{lstlisting}[language=bash,caption=Rendering a composition]
vuo-export source --format=pdf --output RenderTextLayer.pdf RenderTextLayer.vuo
\end{lstlisting}

This can be useful for making tutorials and documentation, and for working on Vuo's visual design.

`vuo-export source` can output either raster (PNG) or vector (PDF or SVG) files.  You can create a PDF, then open it in macOS Preview.app and print it.  The command `vuo-export --help` provides a complete list of parameters.

Since composition files are in DOT format, you can also render them without Vuo styling using Graphviz:

\begin{lstlisting}[language=bash,caption=Rendering a Vuo composition using Graphviz]
dot -Grankdir=LR -Nshape=Mrecord -Nstyle=filled -Tpng -oRenderTextLayer.png RenderTextLayer.vuo
\end{lstlisting}


# Common patterns - "How do I…" {#common-patterns}
<abstract>These patterns can help you create compositions more quickly and easily</abstract>

If you're trying to figure out how to accomplish something in Vuo, one good starting point is the Node Library search bar. For example, if you want to make a random list of things, search the Node Library for "random" to find relevant nodes like \vuoNode{Make Random List} and \vuoNode{Shuffle List}. Another good starting point is the example compositions for each node set, found under \menu{File > Open Example}.

Some problems you might want to solve with Vuo aren't specific to one node or node set. Certain patterns come up again and again, whether you're making compositions to display graphics, play audio, or anything else. This section covers these general patterns. Reviewing these patterns can help you create compositions more quickly and easily.

## Do something in response to user input

Since Vuo is event-driven, this is easy. Most nodes that get user input have a trigger port that fires an event each time new input comes in. To make something happen in response to that event, just connect a cable from the trigger port to the nodes that make it happen.

Here's an example that makes a circle follow the mouse cursor as the user moves the mouse around.

\vuoCompositionImage{MoveCircleWithMouse}

## Do something after something else is done
<abstract>How to execute nodes in sequence</abstract>

This is often quite easy, too, because of Vuo's [rules for event flow](#the-rules-of-events). If you want one node to execute before another, you can just draw a cable from the first node to the second node. In the composition below, for each event from \vuoNode{Fire Periodically}, the two \vuoNode{Count} nodes always finish executing before the \vuoNode{Add} node begins executing.

\vuoCompositionImage{CountScatter}

Sometimes you might need to enforce a "do something after something else is done" rule that's more complicated than putting nodes in a sequence, as above. For example, you might want a composition to do something only after the user has typed a certain word. The next section explains how to check for conditions like that and do something when they're fulfilled.

## Do something if one or more conditions are met
<abstract>How to make decisions with true/false values</abstract>

Vuo has a data type that represents whether a condition is met: the Boolean data type. If a node has a Boolean port, that port's value can be one of two things: *true* or *false*. *True* means "yes, the condition is met". *False* means "no, the condition is not met".

When checking if conditions are met, you'll often be working with nodes that have a Boolean output port. Many such nodes have a title that starts with "Is" or "Are", like \vuoNode{Is Greater than} and \vuoNode{Are Equal}.

Here's an example that writes a message on the console window when the user types the word "please".

\vuoCompositionImage{RespondToMagicWord}

Below is an example (\menu{File > Open Example > Logic > Is Mouse Within Intersecting Rectangles}) that checks two conditions: is the mouse cursor within the blue rectangle? is it within the red rectangle? The \vuoNode{Are Any True} node says yes (*true*) if the mouse is within at least one of the rectangles. The \vuoNode{Are All True} node says yes if the mouse is within both rectangles. The \vuoNode{Is One True} node says yes if the mouse is within one rectangle and not the other.

\vuoCompositionImage{IsMouseWithinIntersectingRectangles}

Here's one more example. It demonstrates how conditions can be used to coordinate between nodes downstream of different triggers. The composition displays the message "Camera detected" once it starts receiving input from the user's video camera, that is, once the \vuoNode{Receive Live Video} node's trigger port starts firing events. The events from that trigger port change the \vuoNode{Switch} node's output to *true*, indicating to the rest of the composition that "Camera detected" should be displayed.

\vuoCompositionImage{DetectCamera}

## Do something if an event is blocked
<abstract>How to make decisions based on whether an event reaches a node</abstract>

Nodes that have an event door on an input port can let some events through and block others. If you want to do something different depending on whether the event was let through or blocked, you can use an \vuoNode{Are All Hit} node.

Below is an example that checks if a barcode was found in an image. Since the \vuoNode{Find Barcode in Image} node blocks events when no barcode is found, the \vuoNode{Are All Hit} node is used to check whether the event was blocked. \vuoNode{Are All Hit} outputs *false* if \vuoNode{Find Barcode in Image} blocks the event and *true* otherwise.

\vuoCompositionImage{DetectBarcode}

## Do something if data has changed
<abstract>How to react to changes in output port values</abstract>

Several nodes check if data has changed in a certain way and only let an event through if it has: \vuoNode{Changed}, \vuoNode{Increased}, \vuoNode{Decreased}, \vuoNode{Became True}, and \vuoNode{Became False}. In the composition below, the \vuoNode{Became True} node outputs an event each time the output of \vuoNode{Is Within Rectangle} changes from *false* to *true*, emitting a sound effect each time the mouse cursor enters the square.

\vuoCompositionImage{BeepWhenMouseEntersSquare}

Like \vuoNode{Became False} and the other nodes just described, the \vuoNode{Allow Changes} node only lets an event through if the data has changed. But \vuoNode{Allow Changes} is different because it passes the data through along with the event. This can be useful when your composition does something time-consuming or processor-intensive with the data, and only needs to do that work when the data changes. For example, this composition periodically picks a large image file to load, but avoids reloading the same image file if it's picked twice in a row.

\vuoCompositionImage{FetchOnlyWhenURLChanges}

## Do something after an amount of time has elapsed
<abstract>How to schedule something to happen</abstract>

Sometimes, you may want a composition to do something immediately in response to an event. Other times, you may want it to wait until a certain amount of time has passed to do something — for example, launch an animation, start a video, or display a message.

This composition (\menu{File > Open Example > Time > Animate On Schedule}) launches a series of animations. At 0.2, 0.4, 0.6, 0.8, and 1 second after the composition starts, it sets in motion the next in a series of circles. The bouncing movements of the circles are staggered because each \vuoPort{Elapsed Time} port of the \vuoNode{Schedule} node outputs a time that's 0.2 seconds after the previous \vuoPort{Elapsed Time} port's value.

\vuoCompositionImage{AnimateOnSchedule}

Instead of scheduling things relative to the start of the composition, the composition below (\menu{File > Open Example > Time > Flash On Mouse Press}) schedules things relative to the most recent mouse press. When the mouse is pressed, the rectangle's color changes to blue, then gray, then blue, then gray. Why does the \vuoNode{Schedule} node in this composition schedule things relative to the most recent mouse press, instead of relative to when the composition started, as in the previous example? Because the \vuoNode{Schedule} node's \vuoPort{Time} input port gets its data from the \vuoNode{Measure Time} node, which outputs the time elapsed since the mouse press.

\vuoCompositionImage{FlashOnMousePress}

## Do something repeatedly over time
<abstract>How to schedule something to happen repeatedly</abstract>

If you want a composition to do something every N seconds, there are several nodes that fire events at a steady rate. The \vuoPort{Refreshed at Time} trigger port the \vuoNode{Fire on Display Refresh} node fires every time the computer display refreshes, which is usually about 60 times per second. For a faster or slower rate, you can use the \vuoNode{Fire Periodically} node.

The composition below uses a \vuoNode{Fire Periodically} node to change the width and number of tiled copies of an image every 3 seconds. This composition actually has two kinds of repetition over time. One is the change in tile width that occurs every 3 seconds because of the \vuoNode{Fire Periodically} node. The other is that the tile width repeats itself every 12 seconds. It goes from 2, to 1, to 0.5, to 0.25, and then back to 2. This wrapping-around of the tile width is done by the \vuoNode{Count within Range} node.

\vuoCompositionImage{ChangeTilingPeriodically}

\vuoNode{Count within Range} is one of many ways to cycle through a series of numbers. Another is the \vuoNode{Curve} node when its \vuoPort{Loop} port is set to *Loop* or *Mirror*. And another is the \vuoNode{Wave} node. The composition below (\menu{File > Open Example > Motion > Wave Circle}) uses the \vuoNode{Wave} node to make a circle move back and forth.

\vuoCompositionImage{WaveCircle}

If you want to cycle through a series of things other than numbers, you can use \vuoNode{Cycle through List}. Here's an example (\menu{File > Open Example > List > Cycle Seasons}) that uses \vuoNode{Cycle through List} nodes to cycle through colors and texts, displaying the next one each time the mouse is pressed.

\vuoCompositionImage{CycleSeasons}

## Do something to each item in a list
<abstract>How to iterate through a list</abstract>

\noteTextProgrammers{\vuoNode{Process List} and \vuoNode{Build List} are Vuo's general-purpose nodes for iteration. They're similar to text programming constructs such as loop control structures and foreach and apply functions.}

The previous section showed how to do something with each list item in turn, using a \vuoNode{Cycle through List} node. For each event the \vuoNode{Cycle through List} node receives, it outputs one list item. If instead you want an event to do something to all list items, you can use the \vuoNode{Process List} node.

Here's an example (\menu{File > Open Example > List > Display Grid Of Images}) that turns a list of images into a list of layers using \vuoNode{Process List}. When \vuoNode{Process List} gets an event and list of images into its \vuoPort{Start Processing} port, it rapidly fires a series of events through its \vuoPort{Item} port, one event for each image in the list. The image and event go through the \vuoNode{Make Image Layer} node, and the created layer and event go into the \vuoNode{Process List} node's \vuoPort{Processed Item} port. Once that port has received as many events as \vuoPort{Item} fired, the \vuoPort{Finished Processing} port fires an event with the accumulated list of created layers.

\vuoCompositionImage{DisplayGridOfImages}

## Create a list of things
<abstract>How to build a list</abstract>

If you don't have a list to start with, one way to create one is with the \vuoNode{Build List} node. \vuoNode{Build List} looks a lot like \vuoNode{Process List}. The difference is that the \vuoNode{Build List} node's \vuoPort{Start Building} port inputs an integer (the number of list items to create) instead of a list, and the \vuoPort{Index} port rapidly fires a series of integers (from 1 to the number of list items) instead of input list items. Here's an example (\menu{File > Open Example > List > Display Rainbow Ovals}) that uses the \vuoNode{Build List} node to display a grid of 100 different-colored ovals.

\vuoCompositionImage{DisplayRainbowOvals}

\vuoNode{Build List} and \vuoNode{Process List} are general-purpose tools. Vuo also provides some simpler, more specialized ways to create certain types of lists. These include \vuoNode{Make Random List} to make a list of random numbers or points, \vuoNode{Copy Layer} and \vuoNode{Copy Scene} to duplicate a 2D or 3D object, and \vuoNode{Enqueue}, which is explained in the next section.

## Maintain a list of things
<abstract>How to hold onto and modify a list</abstract>

Sometimes you may want not only to create a list, but also to hold onto it and make changes to it over time. One way to do that is with a feedback loop, as in the example composition below (\menu{File > Open Example > List > Replace Colors In Gradient}). It maintains a list of colors, randomly changing one of them every 1 second.

\vuoCompositionImage{ReplaceColorsInGradient}

Another way you might want to maintain a list is to accumulate a queue of items over time, using the \vuoNode{Enqueue} node. A queue in this node is like a queue of people waiting in line. It's first-in-first-out, meaning that new items get added to the end of the line, and the item that's been waiting in line the longest is the next one that can leave the queue. Here's an example that uses \vuoNode{Enqueue} to remember the positions of the 5 most recent mouse presses.

\vuoCompositionImage{RememberMousePresses}

## Gradually change from one number/point to another
<abstract>How to transition between values</abstract>

Earlier, under "Do something repeatedly over time", the \vuoNode{Curve} and \vuoNode{Wave} nodes were mentioned as ways to cycle through a series of numbers or points. You can also think of these nodes as ways to gradually change from one number or point to another. Here's an example that uses a \vuoNode{Curve} node to gradually move a circle from one point to another. Since the \vuoPort{Curve} port is set to *Quadratic* and the \vuoPort{Easing} port is set to *In + Out*, the circle starts moving slowly, picks up speed, and then slows down as it reaches its destination.

\vuoCompositionImage{GraduallyMoveCircle}

Another way to gradually change from one number or point to another is with the "Smooth" nodes — \vuoNode{Smooth with Duration}, \vuoNode{Smooth with Inertia}, \vuoNode{Smooth with Rate}, and \vuoNode{Smooth with Spring}. Here's an example (\menu{File > Open Example > Motion > Spring Back}) that makes a square spring back to the center of the window when the user drags and releases it.

\vuoCompositionImage{SpringBack}

## Set up a port's data when the composition starts
<abstract>How to initialize input port values</abstract>

When a composition starts running, its data-and-event input ports start out with some initial data — either the port's constant value, if you've used the input editor to set one for the port, or the port's default value. An input port with an incoming data-and-event cable stays at its default value until the first data-and-event comes in through the cable. Sometimes you may want to send certain data with that first event so that the port will start off with the right value.

A simple way to do that is with a \vuoNode{Fire on Start} node. In the \vuoNode{Smooth with Spring} example in the previous section, the \vuoNode{Fire on Start} node fires an event that sets up the data for two input ports. One is the \vuoNode{Align Layer to Window} node's \vuoPort{Layer} input port, which gets the layer created by \vuoNode{Make Text Layer}. The other is the \vuoNode{Smooth with Spring} node's \vuoPort{Set Position} input port, which gets initialized to (0,0). The \vuoNode{Select Latest} node helps out here by sending (0,0) to the \vuoPort{Set Position} port for the \vuoNode{Fire on Start} event and, after that, the current mouse position each time the \vuoNode{Receive Mouse Drags on Layer} fires an event.

Using \vuoNode{Fire on Start} to set up data is pretty simple, but it has one weakness: the \vuoNode{Fire on Start} node's trigger isn't coordinated with other triggers in the composition. If you're trying to use \vuoNode{Fire on Start} together with the \vuoPort{Refreshed at Time} port of \vuoNode{Fire on Display Refresh}, you might see a momentary flicker or adjustment in graphics as the composition starts. That's because the \vuoNode{Fire on Start} event and the first \vuoPort{Refreshed at Time} event are setting up different parts of the graphics at slightly different times. So how can you avoid the flicker? Instead of \vuoNode{Fire on Start}, which fires its own event, use \vuoNode{Allow First Event}, which can borrow the event fired from \vuoPort{Refreshed at Time}. Here's an example.

\vuoCompositionImage{ChangeBackgroundColor}

## Send the same data to multiple input ports
<abstract>How to share the same value among more than one input port</abstract>

If you have several input ports in your composition that all need to stay in sync with the same data, then it's usually a good idea to feed cables to all of them from a single output port. But what if the data isn't coming from an output port — what if it's a constant value? In that case, you can use a \vuoNode{Share Value} node to set the constant value in one place and propagate it from the \vuoNode{Share Value} node's output port to all connected input ports.

Here's an example that draws two shapes, all of the same height. You could accomplish the same thing without the \vuoNode{Share Value} node by using input editors to individually set the \vuoPort{Height} input ports to 0.8. The advantage of using \vuoNode{Share Value} is that, if you change your mind and decide the height should be 1.0 instead, you only have to edit it on the \vuoNode{Share Value} node's input port instead of on all connected input ports.

\vuoCompositionImage{ShareHeight}

## Merge data/events from multiple triggers
<abstract>How to coordinate overlapping event streams</abstract>

When you have streams of events from multiple triggers flowing through your composition, usually those streams of events have to merge somewhere in the composition.

Sometimes the streams of events just naturally overlap, as in the example below (\menu{File > Open Example > Scene > Move Spinning Sphere}). The events fired from the \vuoPort{Refreshed at Time} port on \vuoNode{Fire on Display Refresh} and the events fired from the \vuoPort{Moved To} port on \vuoNode{Receive Mouse Moves} both travel through the \vuoNode{Make Transform} and \vuoNode{Make Sphere} nodes to the \vuoNode{Render Scene to Window Node}.

\vuoCompositionImage{MoveSpinningSphere}

Other times, you may want to merge the event streams more intentionally. Here's an example (\menu{File > Open Example > Select > Show Arrow Presses}) that takes input from key presses on different arrow keys, and displays a message for each one. The \vuoNode{Select Latest} node lets the events from each arrow key through.

\vuoCompositionImage{ShowArrowPresses}

Here's an example that shows a different way of merging two event streams. This composition (\menu{File > Open Example > Data > Store Mouse Position}) draws two gradients that each follow the mouse cursor a bit differently. The purple (upper) gradient stays with the mouse all the time. The violet (lower) gradient only updates every 1 second. For the lower gradient, the event streams from \vuoNode{Receive Mouse Moves} and \vuoNode{Fire Periodically} merge at the \vuoNode{Hold Value} node. Unlike the composition in the previous example, which let both event streams through, this composition lets one event stream through and blocks the other. However, the data left by the blocked event stream (from \vuoNode{Receive Mouse Moves}) gets picked up and carried along downstream by the other event stream (from \vuoNode{Fire Periodically}).

\vuoCompositionImage{StoreMousePosition}

## Route data/events through the composition
<abstract>How to send event streams in different directions depending on some condition</abstract>

\noteTextProgrammers{Vuo's \vuoNode{Select Input} and \vuoNode{Select Output} are similar to \code{if}/\code{else} or \code{switch}/\code{case} statements.}

In the last example in the previous section, events from the \vuoNode{Receive Mouse Moves} node's trigger were always blocked at the \vuoNode{Hold Value} node, and events from the \vuoNode{Fire Periodically} node's trigger were always allowed through. Instead of always blocking one trigger's events and always letting another trigger's events through, what if you want to switch between the event streams?

Here's an example with a keyboard control that switches the data-and-event stream that controls a circle's position. When the user presses the space bar, setting the \vuoNode{Select Input} node's \vuoPort{Which} port to *true*, the circle is controlled by the Leap Motion device. When the user presses the space bar again, setting the \vuoPort{Which} port to *false*, the circle is controlled by the mouse. Whichever data-and-event stream is *not* controlling the circle at a given time is blocked at the \vuoNode{Select Input} node.

\vuoCompositionImage{SwitchControllers}

Instead of taking multiple event streams and picking one to let through, as in the previous example, what if you have a single event stream and want to pick one of several downstream paths to route it to? Below is an example of that. The space bar toggles between two circles. Whichever circle is chosen at a given time is controlled by the mouse. This works because the \vuoNode{Select Output} node routes the data-and-event stream from \vuoNode{Receive Mouse Moves} through just one of its output ports at a time.

\vuoCompositionImage{SwitchControllees}

## Reuse the output of a node without re-executing the node
<abstract>How to store data so it doesn't have to be recomputed</abstract>

Some nodes change their output every time they're executed. The \vuoNode{Count} node is an example. If you feed an event into any of its input ports — \vuoPort{Increment}, \vuoPort{Decrement}, or \vuoPort{Set Count} — the node outputs a count that's different from the previous count (except of course in special cases, like doing \vuoPort{Set Count} when the node is already at that count). What if you don't want to change the count, and you just want to output the current count?

Here's an example that increments a count each time the user presses a mouse button, and displays the current count in a window every 5 seconds. (This same pattern could be applied to practical situations, such as a sensor incrementing a count each time a person passes through a doorway and the count periodically being sent over a network to monitor the building's occupancy.)

\vuoCompositionImage{CountAndHoldMousePresses}

The key to this composition is the \vuoNode{Hold Value} node. Each time the \vuoNode{Count} node outputs a value, the \vuoNode{Hold Value} node holds on to it (in other words, stores it). Every 5 seconds, an event from \vuoNode{Fire Periodically} hits the \vuoNode{Hold Value} node's \vuoPort{Update} port, and the \vuoNode{Hold Value} node outputs the count that it's storing.

## Run slow parts of the composition in the background
<abstract>How to execute nodes asynchronously</abstract>

Different parts of the composition can be executing simultaneously. If you have multiple triggers firing events through the composition, events from both triggers can be traveling through the composition at the same time. This fact comes in handy if you want a composition to start working on a slow task and do something quicker in the meantime.

Here's an example (\menu{File > Open Example > Event > Load Image Asynchronously}). The slow task, in this case, is to download an image from the internet. Immediately after this composition starts running, it starts downloading the image and, in the meantime, fills the window with a solid color. The \vuoNode{Spin Off Event} node is what allows the download to happen in the background. If \vuoNode{Spin Off Event} weren't there, then the \vuoNode{Select Latest} node would wait for both \vuoNode{Make Color Image} and \vuoNode{Fetch Image} to complete before it executed. But, thanks to \vuoNode{Spin Off Event}, the \vuoNode{Fetch Image} node is now executed by a different event than the \vuoNode{Make Color Image} node, so \vuoNode{Select Latest} can go ahead and execute as soon as \vuoNode{Make Color Image} is complete.

\vuoCompositionImage{LoadImageAsynchronously}


# Troubleshooting
<abstract>Helpful tools for troubleshooting</abstract>

What if you run into problems using Vuo? This section describes several ways to figure out why a composition isn't working correctly. For further help, you can visit our [community site](https://community.vuo.org).

## Tools for troubleshooting compositions

Several features of the Vuo editor can help you understand and debug the behavior of your compositions.

### Watch events with Show Events mode

\definition{Show Events mode}{Lets you watch the events flow through your composition}

\term{Show Events mode} lets you watch the events flow through your composition. You can turn it on and off with the \menu{Run > Show Events} and \menu{Run > Hide Events} menu items. In Show Events mode, trigger ports are animated as they fire events. Nodes turn opaque as they're executed and gradually become more transparent as time passes since their most recent execution. Using Show Events mode, you can see if certain parts of your composition are executing.

### Watch data and events with port popovers

\definition{port popover}{A panel that shows a port's current value, shown when you click on a port}

\Term{port popover}s let you inspect the data and events flowing through individual ports. A port popover pops up when you click on a port. If you want to keep the port popover open for a while, for example to look at several port popovers at once, click on the popover. While the composition is running, the port popover shows several pieces of information that can help with debugging:

   - Last event — The time of the most recent event through the port, and the average number of events per second.
   - Value — For ports that carry data, the most recent data through the port.
   - Event throttling — For trigger ports, whether the port enqueues or drops events.

### Watch data and events with \vuoNode{Display Console Window}

The \vuoNode{Display Console Window} node shows a window in which your composition can write text. You can use this node to observe values that are hard to see in port popovers because they're changing too rapidly. The \vuoNode{Allow Changes} node can help by filtering out repeated data.

\tip{To find other nodes that can help with troubleshooting, search the Node Library for "debug" or "troubleshoot".}

### Check for errors in the Console

\newInVersion{2.4}

\definition{Console}{A window that displays log messages.}

\menu{Tools > Show Console} opens a \term{Console} window that displays log messages from Vuo. These can help explain why a composition isn't working as expected. For example, if you run a composition containing a \vuoNode{Fetch Image} node, and the image file that you're trying to fetch doesn't exist, the node will log an error that appears in the Console.

### Check your assumptions by reading node descriptions

\definition{node description}{Tells you how a node is supposed to work; appears in the \term{Node Documentation Panel} whenever you select the node in the Node Library or on the canvas}

When you select a node in the Node Library or on the canvas, the \term{node description} appears in the lower panel of the Node Library. The node description tells you in detail how the node is intended to work.

## Common problems
<abstract>Some common problems and how you can fix them</abstract>

Contents:

   - [My composition isn’t working and I don’t know why](#my-composition-isnt-working-and-i-dont-know-why)
   - [Some nodes aren’t executing](#some-nodes-arent-executing)
   - [Some nodes are executing when I don’t want them to](#some-nodes-are-executing-when-i-dont-want-them-to)
   - [Some nodes are outputting the wrong data](#some-nodes-are-outputting-the-wrong-data)
   - [The composition’s output is slow or jerky](#the-compositions-output-is-slow-or-jerky)
   - [Vuo slows down when my computer heats up](#vuo-slows-down-when-my-computer-heats-up)
   - [Various compositions won’t run](#various-compositions-wont-run)

### My composition isn't working and I don't know why

The first step is to take a deep breath and relax! OK, now the second step is to understand the problem. Here are some questions to ask yourself (or go through with a friend or collaborator):

   - What do you expect the composition to do?
   - What is the composition doing instead?
   - Where in the composition does the problem begin?

Using the tools provided by Vuo, try to narrow down the problem. Figure out exactly which nodes aren't working as you expect. Then try some of the more specific troubleshooting steps in the rest of this section.

### Some nodes aren't executing

If a node doesn't become opaque in Show Events mode, or if its port popover says "Last Event: (none observed)", then the node isn't executing. If a node isn't executing, that means events aren't reaching it. Here are some things to check:

   - Is there a trigger port connected to the node? Trace backward through your composition, starting at the node that isn't executing, and looking at the cables and nodes feeding into it. Do you find a trigger port? If not...
      - Add a node with a trigger port, such as \vuoNode{Fire on Start}, and connect the trigger port to the node that isn't executing.
   - Is the trigger port firing? Check the trigger port's popover (or connect a \vuoNode{Count} node, as described above). If the trigger isn't firing...
      - Check the node description for the trigger port's node. Make sure you understand exactly when the trigger is supposed to fire.
      - Check the trigger port's event throttling, which is displayed in the port popover. If it says "drop events", try changing it to "enqueue events". (See the section [Buildup of events](#buildup-of-events).)
   - Are events from the trigger port reaching some nodes but not others? Trace forward through your composition, from the trigger port toward the node that isn't executing, and find the last node that's receiving events.
      - Look at the input ports on that last node. Do they have walls or doors? (See the section [Event walls and doors](#event-walls-and-doors).) Check the node's description to help you understand when and why the node blocks events. To send events through the node, you may need to connect a cable to a different input port.
      - Look at the output ports on that last node. Are they trigger ports? Remember that events into input ports never travel out of trigger ports. To send events through the node, you may need to connect a cable to a different output port.

### Some nodes are executing when I don't want them to

A node executes every time an event reaches it. If you don't want the node to execute at certain times, then your composition needs to block events from reaching the node. For more information, see the section [Common patterns - "How do I…"](#common-patterns).

### Some nodes are outputting the wrong data

If your composition is outputting graphics, audio, or other information that's different from what you expected, then you should check the data flowing through your composition. Here are some things to check:

   - Where exactly does the data go wrong?
      - Check each port popover along the way to see if it has the data you expected.
      - Add some nodes to the middle of the composition to help you check the data (for example, a \vuoNode{Render Image to Window} node to check the data in an image port).
   - Is there a node whose output data is different than you expected, given the input data?
      - Read the node description carefully. The node might work differently than you expected.

### The composition's output is slow or jerky

This can happen if events are not flowing through your composition often enough or quickly enough. Here are some things to check:

   - Is each trigger port firing events as often as you expected? Check its port popover to see the average number of events per second. If it's firing more slowly than you expected...
      - Check the node description for the trigger port's node. Make sure you understand exactly when the trigger is supposed to fire.
      - Check for any nodes downstream of the trigger port that might take a long time to execute, for example a \vuoNode{Fetch Image} node that downloads an image from the internet. Change your composition so those nodes receive fewer events. (See the section [Common patterns - "How do I…"](#common-patterns).)
      - Check the trigger port's event throttling, which is displayed in the port popover. If it says "drop events", try changing it to "enqueue events". (See the section [Buildup of events](#buildup-of-events).)
      - Check the event throttling of each other trigger port that can fire events through the same nodes as this trigger port. If the other trigger port's event throttling is "enqueue events", try changing it to "drop events".
   - Is each node receiving events as often as you expected? If not...
      - Check if there are any event doors that might be blocking events between the trigger and the node. (See the section [Event walls and doors](#event-walls-and-doors).)
   - Is the composition using a lot of memory or CPU? You can check this in the Activity Monitor application. If so...
      - Check if any parts of the composition are executing more often than necessary, and try not to execute them as often. (See the section [Common patterns - "How do I…"](#common-patterns).)
      - Export the composition to an application. When run as an application instead of in the Vuo editor, compositions use less memory and CPU.
      - Quit other applications to make more memory and CPU available.
      - Run the composition on a computer with more memory and CPU.

### Vuo slows down when my computer heats up

Some Mac systems, including recent MacBook Pros, aren't designed to adequately dissipate the heat they generate when under heavy load, so macOS drastically slows down the system in order to generate less heat. This is called _thermal throttling_. This behavior may affect the performance of your Vuo compositions.

You can monitor macOS's thermal throttling by opening Terminal.app and running this command: `pmset -g thermlog`. It will automatically update when the status changes. When the `CPU_Speed_Limit` value is less than 100, thermal throttling is active.

To mitigate this, consider trying some of the following options:

   - [Reset your Mac's SMC](https://support.apple.com/en-us/HT201295) to recalibrate its thermal management profile, which may change when macOS decides to apply thermal throttling.
   - Improve your Mac's heat dissipation:
      - Ensure your Mac is in a cool room and placed on a cool surface out of direct sunlight.
      - Ensure your Mac's air inlets and egresses are unobstructed.
      - Hire a qualified technician to disassemble your Mac and clean the dust from its fans.
      - Use an external fan to draw hot air away from your Mac.
      - Install 3rd-party software to increase your Mac's internal fan speeds.
   - Reduce the CPU and GPU usage of your composition:
      - Reduce the image and mesh resolutions.
      - Reduce the framerate.
      - Reduce the number or quality of image filters.

### Various compositions won't run

If compositions fail to start, the problem could be that you have a node installed that for some reason prevents Vuo from running compositions. The node might be outdated or broken, or it might trigger a latent bug in Vuo.

If Vuo is unable to deal with one of your installed nodes, then it may write a log message that you can find in \menu{Tools > Show Console}. If you don't see any relevant messages, try relaunching Vuo and checking the Console again. The log message may point out the problematic node.

If the Console messages don't help you identify the problem, another thing you can try is to uninstall all nodes, including subcompositions. The quickest way to do this is to rename your \term{User Library folder} and \term{System Library folder} (if not empty}. (For more information, see [Installing a node](#installing-a-node).) Then relaunch Vuo. If you're now able to run compositions, then one of the nodes that you just uninstalled must have been the problem.

From there, the next step is to figure out which node is the problem. You can do this efficiently by first reinstalling half of your nodes. If the problem returns, then the problematic node must be in that half, so uninstall half of them and see what happens. Otherwise, reinstall half of the remaining nodes. Continue working by halves until you've narrowed the problem down to one node.

Once you've pinpointed the problematic node or subcomposition, the best way to get help depends on where the node came from. If you downloaded it from another Vuo community member, try contacting them for help. If you created the node yourself, you can ask for help on the [community site](https://community.vuo.org).

## General tips
<abstract>More tips to help you troubleshoot compositions</abstract>

Finally, here are a few more tips to help you troubleshoot compositions:

   - If you're having trouble with a large and complicated composition, try to simplify the problem. Create a new composition and copy a small piece of your original composition into it. It's much easier to troubleshoot a small composition than a large one.
   - If you're having trouble with a composition that has rapidly firing trigger ports, try to slow things down. For example, in place of the \vuoNode{Fire on Display Refresh} node, use a \vuoNode{Fire Periodically} node set to fire once per second.
   - If your composition used to work but now it doesn't, figure out exactly what changed. Did you add or remove some cables? Were you using a different version of Vuo? Knowing what changed will help you narrow down the problem.
   - Try rearranging your nodes and cables so you can see the flow of events more clearly. If your nodes and cables are nicely laid out, then it can be easier to spot problems.
   - Don't hesitate to experiment (but first save a copy of your composition). If you're not sure if a node is working as you expect, try it with various inputs.
   - You're welcome to [ask questions](https://community.vuo.org) or [report a bug](https://vuo.org/bug).
