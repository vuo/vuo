/**
 * @file
 * Test composition.
 *
 * @copyright Copyright © 2012–2023 Kosada Incorporated.
 * This code may be modified and distributed under the terms of the MIT License.
 * For more information, see https://vuo.org/license.
 */

digraph G
{
MeasureTime [type="vuo.time.measureTime" version="2.0.1" label="Measure Time|<refresh>refresh\l|<time>time\l|<start>start\l|<pause>pause\l|<reset>reset\l|<elapsedTime>elapsedTime\r" pos="135,15"];
SelectEventOutput [type="vuo.select.out.boolean.event" version="2.0.0" label="Select Event Output|<refresh>refresh\l|<which>which\l|<in>in\l|<falseOption>falseOption\r|<trueOption>trueOption\r" pos="-105,30"];
SelectEventOutput2 [type="vuo.select.out.boolean.event" version="2.0.0" label="Select Event Output|<refresh>refresh\l|<which>which\l|<in>in\l|<falseOption>falseOption\r|<trueOption>trueOption\r" pos="-105,105"];
SelectEventOutput3 [type="vuo.select.out.boolean.event" version="2.0.0" label="Select Event Output|<refresh>refresh\l|<which>which\l|<in>in\l|<falseOption>falseOption\r|<trueOption>trueOption\r" pos="-105,180"];
SelectOutput2 [type="vuo.select.out.boolean.VuoReal" version="2.0.0" label="Select Output|<refresh>refresh\l|<which>which\l|<in>in\l|<falseOption>falseOption\r|<trueOption>trueOption\r" pos="-75,-45"];
PublishedInputs [type="vuo.in" label="PublishedInputs|<timeEvent>timeEvent\r|<time>time\r|<startEvent>startEvent\r|<start>start\r|<pauseEvent>pauseEvent\r|<pause>pause\r|<resetEvent>resetEvent\r|<reset>reset\r" _timeEvent_type="VuoBoolean" _timeEvent="false" _time_type="VuoReal" _time="null" _startEvent_type="VuoBoolean" _startEvent="false" _start_type="event" _pauseEvent_type="VuoBoolean" _pauseEvent="false" _pause_type="event" _resetEvent_type="VuoBoolean" _resetEvent="false" _reset_type="event"];
PublishedOutputs [type="vuo.out" label="PublishedOutputs|<elapsedTime>elapsedTime\l" _elapsedTime_type="VuoReal"];

SelectEventOutput2:trueOption -> MeasureTime:pause;
SelectEventOutput3:trueOption -> MeasureTime:reset;
SelectEventOutput:trueOption -> MeasureTime:start;
SelectOutput2:trueOption -> MeasureTime:time;
PublishedInputs:timeEvent -> SelectOutput2:which;
PublishedInputs:time -> SelectOutput2:in;
PublishedInputs:startEvent -> SelectEventOutput:which;
PublishedInputs:start -> SelectEventOutput:in;
PublishedInputs:pauseEvent -> SelectEventOutput2:which;
PublishedInputs:pause -> SelectEventOutput2:in;
PublishedInputs:resetEvent -> SelectEventOutput3:which;
PublishedInputs:reset -> SelectEventOutput3:in;
MeasureTime:elapsedTime -> PublishedOutputs:elapsedTime;
}
