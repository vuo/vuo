/**
 * @file
 * Test composition.
 *
 * @lastSavedInVuoVersion 2.0.0
 * @copyright Copyright © 2012–2023 Kosada Incorporated.
 * This code may be modified and distributed under the terms of the MIT License.
 * For more information, see https://vuo.org/license.
 * @see This is a Vuo Composition source code file.  See https://vuo.org for further information.
 */

digraph G
{
ConvertIntegertoText1 [type="vuo.type.integer.text" version="1.0.0" label="ConvertIntegertoText1|<refresh>refresh\l|<integer>integer\l|<text>text\r" pos="345,345"];
DisplayConsoleWindow1 [type="vuo.console.window" version="1.0.1" label="DisplayConsoleWindow1|<refresh>refresh\l|<writeLine>writeLine\l|<typedLine>typedLine\r|<typedWord>typedWord\r|<typedCharacter>typedCharacter\r" pos="780,15" _typedLine_eventThrottling="enqueue" _typedWord_eventThrottling="enqueue" _typedCharacter_eventThrottling="enqueue"];
FirePeriodically1 [type="vuo.time.firePeriodically" version="1.0.2" label="FirePeriodically1|<refresh>refresh\l|<seconds>seconds\l|<fired>fired\r" pos="60,135" _seconds="1" _fired_eventThrottling="enqueue"];
Hold1 [type="vuo.data.hold.VuoInteger" version="2.0.0" label="Hold1|<refresh>refresh\l|<initialValue>initialValue\l|<newValue>newValue\l|<heldValue>heldValue\r" pos="330,165" _initialValue="11"];
Hold2 [type="vuo.data.hold.VuoInteger" version="2.0.0" label="Hold2|<refresh>refresh\l|<initialValue>initialValue\l|<newValue>newValue\l|<heldValue>heldValue\r" pos="435,375" _initialValue="11"];
Subtract1 [type="vuo.math.subtract.VuoInteger" version="1.2.0" label="Subtract1|<refresh>refresh\l|<a>a\l|<b>b\l|<difference>difference\r" pos="270,315" _b="0"];
Subtract2 [type="vuo.math.subtract.VuoInteger" version="1.2.0" label="Subtract2|<refresh>refresh\l|<a>a\l|<b>b\l|<difference>difference\r" pos="270,450" _b="0"];

ConvertIntegertoText1:text -> DisplayConsoleWindow1:writeLine;
FirePeriodically1:fired -> Hold1:refresh;
Hold1:heldValue -> ConvertIntegertoText1:integer;
Hold1:heldValue -> Subtract1:a;
Hold2:heldValue -> Hold1:newValue;
Hold2:heldValue -> Subtract2:a;
Subtract1:difference -> Hold2:refresh;
Subtract2:difference -> Hold2:newValue;
}
