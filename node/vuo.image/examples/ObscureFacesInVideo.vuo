/**
 * @file
 * Pixellates each human face in the camera's view.
 *
 * @createdInVuoVersion 2.0.0
 * @lastSavedInVuoVersion 2.0.3
 * @copyright Copyright © 2012–2023 Kosada Incorporated.
 * @license This composition may be modified and distributed under the terms of the MIT License. For more information, see https://opensource.org/licenses/MIT .
 * @see This is a Vuo Composition source code file.  See https://vuo.org for further information.
 */

digraph G
{
ApplyMask [type="vuo.image.apply.mask" version="1.1.2" label="Apply Mask|<refresh>refresh\l|<image>image\l|<mask>mask\l|<maskedImage>maskedImage\r" pos="735,270"];
Convert2DPointToReal [type="vuo.type.point2d.real.x" version="1.0.1" label="Convert 2D Point to Real|<refresh>refresh\l|<xy>xy\l|<x>x\r" pos="255,825"];
Convert2DPointToReal2 [type="vuo.type.point2d.real.y" version="1.0.1" label="Convert 2D Point to Real|<refresh>refresh\l|<xy>xy\l|<y>y\r" pos="255,840"];
ConvertFrameToImage2 [type="vuo.type.videoframe.image" version="1.0.0" label="Convert Frame to Image|<refresh>refresh\l|<frame>frame\l|<image>image\r" pos="-75,210"];
ConvertImageToLayer3 [type="vuo.type.image.layer" version="1.0.0" label="Convert Image to Layer|<refresh>refresh\l|<image>image\l|<layer>layer\r" pos="915,210"];
ConvertImageToLayer4 [type="vuo.type.image.layer" version="1.0.0" label="Convert Image to Layer|<refresh>refresh\l|<image>image\l|<layer>layer\r" pos="915,195"];
ConvertRectangleTo2DPoint [type="vuo.type.rectangle.center" version="1.0.0" label="Convert Rectangle to 2D Point|<refresh>refresh\l|<rectangle>rectangle\l|<center>center\r" pos="585,405"];
ConvertRectangleTo2DPoint2 [type="vuo.type.rectangle.size" version="1.0.0" label="Convert Rectangle to 2D Point|<refresh>refresh\l|<rectangle>rectangle\l|<size>size\r" pos="105,930"];
FindFacesInImage [type="vuo.image.findFaces" version="1.1.0" label="Find Faces in Image|<refresh>refresh\l|<image>image\l|<minimumConfidence>minimumConfidence\l|<quality>quality\l|<rectangles>rectangles\r|<landmarks>landmarks\r" pos="-150,375" fillcolor="orange" _minimumConfidence="0.5" _quality="0.25"];
GetImageHeight [type="vuo.image.get.height" version="1.0.0" label="Get Image Height|<refresh>refresh\l|<image>image\l|<height>height\r" pos="825,840"];
GetImageWidth [type="vuo.image.get.width" version="1.0.0" label="Get Image Width|<refresh>refresh\l|<image>image\l|<width>width\r" pos="825,825"];
MakeList [type="vuo.list.make.2.VuoLayer" version="2.0.0" label="Make List|<refresh>refresh\l|<1>1\l|<2>2\l|<list>list\r" pos="981,221" fillcolor="blue"];
MakeOvalLayer [type="vuo.layer.make.oval2" version="2.0.0" label="Make Oval Layer|<refresh>refresh\l|<color>color\l|<anchor>anchor\l|<center>center\l|<rotation>rotation\l|<width>width\l|<height>height\l|<sharpness>sharpness\l|<opacity>opacity\l|<layer>layer\r" pos="150,540" _color="\{\"r\":1,\"g\":1,\"b\":1,\"a\":1\}" _anchor="\{\"horizontalAlignment\":\"center\",\"verticalAlignment\":\"center\"\}" _rotation="0.0" _sharpness="0.80000000000000004" _opacity="1"];
PixellateImage [type="vuo.image.pixellate" version="1.2.0" label="Pixellate Image|<refresh>refresh\l|<image>image\l|<pixelShape>pixelShape\l|<pixelSize>pixelSize\l|<center>center\l|<pixellatedImage>pixellatedImage\r" pos="570,270" _pixelShape="\"rectangle\"" _pixelSize="0.050000000000000003" _center="\{\"x\":0.0,\"y\":0.0\}"];
ProcessList [type="vuo.list.process.VuoRectangle.VuoLayer" version="1.0.1" label="Process List|<refresh>refresh\l|<fire>fire\l|<processedItem>processedItem\l|<processedList>processedList\r|<processItem>processItem\r" pos="90,375" _processedList_eventThrottling="enqueue" _processItem_eventThrottling="enqueue"];
ReceiveLiveVideo [type="vuo.video.receive2" version="2.0.0" label="Receive Live Video|<refresh>refresh\l|<device>device\l|<width>width\l|<height>height\l|<receivedFrame>receivedFrame\r" pos="-270,210" fillcolor="lime" _device="null" _width="0" _height="0" _receivedFrame_eventThrottling="drop"];
RenderLayersToImage [type="vuo.layer.render.image2" version="2.0.0" label="Render Layers to Image|<refresh>refresh\l|<layers>layers\l|<width>width\l|<height>height\l|<colorDepth>colorDepth\l|<multisampling>multisampling\l|<image>image\r" pos="525,375" _colorDepth="\"8bpc\"" _multisampling="\"off\""];
RenderLayersToWindow [type="vuo.layer.render.window2" version="3.0.0" label="Render Layers to Window|<refresh>refresh\l|<layers>layers\l|<multisampling>multisampling\l|<setWindowDescription>setWindowDescription\l|<updatedWindow>updatedWindow\r" pos="1035,210" fillcolor="blue" _multisampling="\"off\"" _updatedWindow_eventThrottling="enqueue"];
ScalePoint [type="vuo.point.multiply.scalar.VuoPoint2d" version="1.0.0" label="Scale Point|<refresh>refresh\l|<point>point\l|<scaleFactor>scaleFactor\l|<scaledPoint>scaledPoint\r" pos="-135,600" _scaleFactor="1.3999999999999999"];
SpinOffValue2 [type="vuo.event.spinOffValue.VuoImage" version="1.0.0" label="Spin Off Value|<refresh>refresh\l|<value>value\l|<spunOff>spunOff\r" pos="-315,375" fillcolor="lime" _spunOff_eventThrottling="drop"];

ApplyMask:maskedImage -> ConvertImageToLayer3:image;
Convert2DPointToReal2:y -> MakeOvalLayer:height;
Convert2DPointToReal:x -> MakeOvalLayer:width;
ConvertFrameToImage2:image -> ConvertImageToLayer4:image;
ConvertFrameToImage2:image -> GetImageHeight:image;
ConvertFrameToImage2:image -> GetImageWidth:image;
ConvertFrameToImage2:image -> PixellateImage:image;
ConvertFrameToImage2:image -> SpinOffValue2:value;
ConvertImageToLayer3:layer -> MakeList:2;
ConvertImageToLayer4:layer -> MakeList:1;
ConvertRectangleTo2DPoint2:size -> ScalePoint:point;
ConvertRectangleTo2DPoint:center -> MakeOvalLayer:center;
FindFacesInImage:rectangles -> ProcessList:fire;
GetImageHeight:height -> RenderLayersToImage:height;
GetImageWidth:width -> RenderLayersToImage:width;
MakeList:list -> RenderLayersToWindow:layers;
MakeOvalLayer:layer -> ProcessList:processedItem;
PixellateImage:pixellatedImage -> ApplyMask:image;
ProcessList:processItem -> ConvertRectangleTo2DPoint2:rectangle;
ProcessList:processItem -> ConvertRectangleTo2DPoint:rectangle;
ProcessList:processedList -> RenderLayersToImage:layers;
ReceiveLiveVideo:receivedFrame -> ConvertFrameToImage2:frame;
RenderLayersToImage:image -> ApplyMask:mask;
ScalePoint:scaledPoint -> Convert2DPointToReal2:xy;
ScalePoint:scaledPoint -> Convert2DPointToReal:xy;
SpinOffValue2:spunOff -> FindFacesInImage:image;
}
