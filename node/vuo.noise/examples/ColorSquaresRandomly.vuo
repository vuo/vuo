/**
 * @file
 * Displays a pattern of up to 100 colored squares. Each square has a one-in-five chance of being yellow. Once 100 squares are visible, continues to add new squares at the bottom and delete old squares at the top.
 *
 * @lastSavedInVuoVersion 2.0.0
 * @copyright Copyright © 2012–2023 Kosada Incorporated.
 * @license This composition may be modified and distributed under the terms of the MIT License. For more information, see https://opensource.org/licenses/MIT .
 * @see This is a Vuo Composition source code file.  See https://vuo.org for further information.
 */

digraph G
{
ArrangeLayersInGrid [type="vuo.layer.arrange.grid" version="1.1.0" label="Arrange Layers in Grid|<refresh>refresh\l|<layers>layers\l|<scaleToFit>scaleToFit\l|<anchor>anchor\l|<center>center\l|<width>width\l|<columns>columns\l|<height>height\l|<rows>rows\l|<griddedLayer>griddedLayer\r" pos="420,345" _scaleToFit="true" _anchor="\{\"horizontalAlignment\":\"center\",\"verticalAlignment\":\"center\"\}" _center="[\{\"x\":0,\"y\":0\}]" _width="1.800000" _columns="10" _height="1.800000" _rows="10"];
ChangeWindowAspectRatio [type="vuo.window.aspectRatio2" version="2.0.0" label="Lock Window Aspect Ratio|<refresh>refresh\l|<windowDescription>windowDescription\l|<width>width\l|<height>height\l|<changedWindowDescription>changedWindowDescription\r" pos="390,510" _width="1.000000" _height="1.000000"];
Enqueue2 [type="vuo.list.enqueue.VuoLayer" version="1.0.0" label="Enqueue|<refresh>refresh\l|<maxItemCount>maxItemCount\l|<addItem>addItem\l|<clearList>clearList\l|<list>list\r" pos="240,345" _maxItemCount="100"];
FireOnStart2 [type="vuo.event.fireOnStart" version="1.0.0" label="Fire on Start|<refresh>refresh\l|<started>started\r" pos="225,510" fillcolor="lime" _started_eventThrottling="enqueue"];
FirePeriodically [type="vuo.time.firePeriodically2" version="2.0.0" label="Fire Periodically|<refresh>refresh\l|<seconds>seconds\l|<fired>fired\r" pos="-90,135" fillcolor="lime" _seconds="0.250000" _fired_eventThrottling="drop"];
IsGreaterThan3 [type="vuo.data.isGreaterThan.VuoReal" version="1.0.0" label="Is Greater Than|<refresh>refresh\l|<a>a\l|<b>b\l|<greaterThan>greaterThan\r" pos="345,135" _b="4"];
MakeColorLayer [type="vuo.layer.make.rect" version="1.0.0" label="Make Rectangle Layer|<refresh>refresh\l|<color>color\l|<anchor>anchor\l|<center>center\l|<rotation>rotation\l|<width>width\l|<height>height\l|<sharpness>sharpness\l|<roundness>roundness\l|<opacity>opacity\l|<layer>layer\r" pos="45,360" _anchor="\{\"horizontalAlignment\":\"center\",\"verticalAlignment\":\"center\"\}" _center="\{\"x\":0.000000,\"y\":0.000000\}" _rotation="30.000000" _width="2.000000" _height="2.000000" _sharpness="1.0" _roundness="0.0" _opacity="1.0"];
MakeList4 [type="vuo.list.make.1.VuoLayer" version="2.0.0" label="Make List|<refresh>refresh\l|<1>1\l|<list>list\r" pos="623,356" fillcolor="blue"];
MakeRandomValue [type="vuo.noise.random.VuoReal" version="1.0.0" label="Make Random Value|<refresh>refresh\l|<minimum>minimum\l|<maximum>maximum\l|<value>value\r" pos="135,135" fillcolor="orange" _minimum="0.000000" _maximum="5.000000"];
RenderLayersToWindow [type="vuo.layer.render.window2" version="3.0.0" label="Render Layers to Window|<refresh>refresh\l|<layers>layers\l|<multisampling>multisampling\l|<setWindowDescription>setWindowDescription\l|<updatedWindow>updatedWindow\r" pos="675,345" fillcolor="blue" _multisampling="\"4\"" _updatedWindow_eventThrottling="enqueue"];
SelectInput2 [type="vuo.select.in.boolean.VuoColor" version="2.0.0" label="Select Input|<refresh>refresh\l|<which>which\l|<falseOption>falseOption\l|<trueOption>trueOption\l|<out>out\r" pos="525,135" _falseOption="\{\"r\":0,\"g\":0.25098040699958801,\"b\":0.50196081399917603,\"a\":1\}" _trueOption="\{\"r\":0.890517,\"g\":0.898283,\"b\":0.556344,\"a\":1.000000\}"];

ArrangeLayersInGrid:griddedLayer -> MakeList4:1;
ChangeWindowAspectRatio:changedWindowDescription -> RenderLayersToWindow:setWindowDescription;
Enqueue2:list -> ArrangeLayersInGrid:layers;
FireOnStart2:started -> ChangeWindowAspectRatio:windowDescription;
FirePeriodically:fired -> MakeRandomValue:minimum [event=true];
IsGreaterThan3:greaterThan -> SelectInput2:which;
MakeColorLayer:layer -> Enqueue2:addItem;
MakeList4:list -> RenderLayersToWindow:layers;
MakeRandomValue:value -> IsGreaterThan3:a;
SelectInput2:out -> MakeColorLayer:color;
}
