/**
 * @file
 * @brief Twirl Image with Leap
 * Distorts an image based on hand movements detected by your Leap Motion device. 
 *
 * Place your hand about 15 cm/ 6 in above the Leap Motion device.
 *
 * This composition requires a Leap Motion device.
 *
 * Image by Ashim D’Silva on [Unsplash](https://unsplash.com/photos/WeYamle9fDM).
 *
 * @lastSavedInVuoVersion 2.0.0
 * @copyright Copyright © 2012–2023 Kosada Incorporated.
 * @license This composition may be modified and distributed under the terms of the MIT License. For more information, see https://opensource.org/licenses/MIT .
 * @see This is a Vuo Composition source code file.  See https://vuo.org for further information.
 */

digraph G
{
AllowFirstEvent [type="vuo.event.allowFirst" version="1.0.0" label="Allow First Event|<refresh>refresh\l|<event>event\l|<reset>reset\l|<firstEvent>firstEvent\r" pos="390,120"];
Convert3DPointTo2DPoint [type="vuo.type.point3d.point2d.xy" version="1.0.1" label="Convert 3D Point to 2D Point|<refresh>refresh\l|<xyz>xyz\l|<xy>xy\r" pos="840,540"];
FetchImage [type="vuo.image.fetch" version="2.0.0" label="Fetch Image|<refresh>refresh\l|<url>url\l|<image>image\r" pos="750,120" _url="\"Canyon.jpg\""];
Get3DPointValues [type="vuo.point.get.VuoPoint3d" version="2.0.0" label="Get 3D Point Values|<refresh>refresh\l|<point>point\l|<x>x\r|<y>y\r|<z>z\r" pos="720,270"];
GetFrameValues [type="vuo.leap.get.frame" version="1.0.0" label="Get Frame Values|<refresh>refresh\l|<frame>frame\l|<id>id\r|<hands>hands\r|<pointables>pointables\r" pos="15,240" fillcolor="orange"];
GetHandValues [type="vuo.leap.get.hand" version="2.0.0" label="Get Hand Values|<refresh>refresh\l|<hand>hand\l|<id>id\r|<transform>transform\r|<palmVelocity>palmVelocity\r|<wristPosition>wristPosition\r|<sphereRadius>sphereRadius\r|<sphereCenter>sphereCenter\r|<pinchAmount>pinchAmount\r|<grabAmount>grabAmount\r|<isLeftHand>isLeftHand\r|<timeVisible>timeVisible\r|<confidence>confidence\r|<fingers>fingers\r" pos="390,255" fillcolor="orange"];
GetItemFromList [type="vuo.list.get.VuoLeapHand" version="1.0.1" label="Get Item from List|<refresh>refresh\l|<list>list\l|<which>which\l|<item>item\r" pos="210,255" fillcolor="orange" _which="1"];
GetTransformTranslation [type="vuo.transform.get.translation" version="1.0.0" label="Get Transform Translation|<refresh>refresh\l|<transform>transform\l|<translation>translation\r" pos="225,510" fillcolor="orange"];
ReceiveLeapFrame [type="vuo.leap.receive" version="2.0.0" label="Receive Leap Frame|<refresh>refresh\l|<receivedFrame>receivedFrame\r" pos="-225,240" fillcolor="orange" _receivedFrame_eventThrottling="drop"];
RenderImageToWindow2 [type="vuo.image.render.window2" version="4.0.0" label="Render Image to Window|<refresh>refresh\l|<image>image\l|<setWindowDescription>setWindowDescription\l|<updatedWindow>updatedWindow\r" pos="1215,315" fillcolor="blue" _updatedWindow_eventThrottling="enqueue"];
Scale2 [type="vuo.math.scale.VuoReal" version="2.0.0" label="Scale|<refresh>refresh\l|<value>value\l|<start>start\l|<end>end\l|<scaledStart>scaledStart\l|<scaledEnd>scaledEnd\l|<limitToRange>limitToRange\l|<scaledValue>scaledValue\r" pos="915,450" _start="-1.000000" _end="1.000000" _scaledStart="-180.000000" _scaledEnd="180.000000" _limitToRange="false"];
TwirlImage [type="vuo.image.twirl2" version="2.1.1" label="Twirl Image|<refresh>refresh\l|<image>image\l|<center>center\l|<angle>angle\l|<radius>radius\l|<twirledImage>twirledImage\r" pos="1065,315"];

AllowFirstEvent:firstEvent -> FetchImage:url;
Convert3DPointTo2DPoint:xy -> TwirlImage:center;
FetchImage:image -> TwirlImage:image;
Get3DPointValues:z -> Scale2:value;
GetFrameValues:hands -> GetItemFromList:list;
GetHandValues:sphereCenter -> Convert3DPointTo2DPoint:xyz;
GetHandValues:sphereRadius -> TwirlImage:radius;
GetHandValues:transform -> GetTransformTranslation:transform;
GetItemFromList:item -> GetHandValues:hand;
GetTransformTranslation:translation -> Get3DPointValues:point;
ReceiveLeapFrame:receivedFrame -> AllowFirstEvent:event;
ReceiveLeapFrame:receivedFrame -> GetFrameValues:frame;
Scale2:scaledValue -> TwirlImage:angle;
TwirlImage:twirledImage -> RenderImageToWindow2:image;
}
